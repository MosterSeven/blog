(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{281:function(t,e,a){"use strict";a.r(e);var n=a(13),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),e("h3",{attrs:{id:"状态变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态变量"}},[t._v("#")]),t._v(" 状态变量")]),t._v(" "),e("p",[t._v("状态变量是被"),e("strong",[t._v("永久地")]),t._v("保存在合约中的，也就是说它们被写入以太币区块链中（想象成写入一个数据库）。")]),t._v(" "),e("div",{staticClass:"language-solidity extra-class"},[e("pre",{pre:!0,attrs:{class:"language-solidity"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("contract")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Example")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个无符号整数将会永久的被保存在区块链中")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v(" myUnsignedInteger "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"全局变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[t._v("#")]),t._v(" 全局变量")]),t._v(" "),e("p",[t._v("全局变量是全局范围工作的变量，都是"),e("code",[t._v("solidity")]),t._v("预留关键字。他们可以在函数内不声明直接使用：")]),t._v(" "),e("p",[t._v("下面是一些常用的全局变量，更完整的列表请看这个"),e("a",{attrs:{href:"https://learnblockchain.cn/docs/solidity/units-and-global-variables.html#special-variables-and-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),e("OutboundLink")],1),t._v("：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("blockhash(uint blockNumber)")]),t._v(" "),e("ul",[e("li",[t._v("("),e("code",[t._v("bytes32")]),t._v(")给定区块的哈希值 – 只适用于256最近区块, 不包含当前区块。")])])]),t._v(" "),e("li",[e("code",[t._v("block.coinbase")]),t._v(": ("),e("code",[t._v("address payable")]),t._v(")\n"),e("ul",[e("li",[t._v("当前区块矿工的地址")])])]),t._v(" "),e("li",[e("code",[t._v("block.gaslimit")]),t._v(": ("),e("code",[t._v("uint")]),t._v(")\n"),e("ul",[e("li",[t._v("当前区块的gaslimit")])])]),t._v(" "),e("li",[e("code",[t._v("block.number")]),t._v(": ("),e("code",[t._v("uint")]),t._v(")\n"),e("ul",[e("li",[t._v("当前区块的number")])])]),t._v(" "),e("li",[e("code",[t._v("block.timestamp")]),t._v(": ("),e("code",[t._v("uint")]),t._v(")\n"),e("ul",[e("li",[t._v("当前区块的时间戳，为unix纪元以来的秒")])])]),t._v(" "),e("li",[e("code",[t._v("gasleft()")]),t._v(": ("),e("code",[t._v("uint256")]),t._v(")\n"),e("ul",[e("li",[t._v("剩余 gas")])])]),t._v(" "),e("li",[e("code",[t._v("msg.data")]),t._v(": ("),e("code",[t._v("bytes calldata")]),t._v(")\n"),e("ul",[e("li",[t._v("完整call data")])])]),t._v(" "),e("li",[e("code",[t._v("msg.sender")]),t._v(": ("),e("code",[t._v("address payable")]),t._v(")\n"),e("ul",[e("li",[t._v("消息发送者 (当前 caller)")])])]),t._v(" "),e("li",[e("code",[t._v("msg.sig")]),t._v(": ("),e("code",[t._v("bytes4")]),t._v(")\n"),e("ul",[e("li",[t._v("calldata的前四个字节 (function identifier)")])])]),t._v(" "),e("li",[e("code",[t._v("msg.value")]),t._v(": ("),e("code",[t._v("uint")]),t._v(")\n"),e("ul",[e("li",[t._v("当前交易发送的"),e("code",[t._v("wei")]),t._v("值")])])])]),t._v(" "),e("h4",{attrs:{id:"msg-sender"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#msg-sender"}},[t._v("#")]),t._v(" msg.sender")]),t._v(" "),e("p",[e("code",[t._v("msg.sender")]),t._v(" 指的是当前调用者（或智能合约）的 "),e("code",[t._v("address")]),t._v("。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意：在 Solidity 中，功能执行始终需要从外部调用者开始。 一个合约只会在区块链上什么也不做，除非有人调用其中的函数。所以 "),e("code",[t._v("msg.sender")]),t._v("总是存在的。")])]),t._v(" "),e("p",[t._v("以下是使用 "),e("code",[t._v("msg.sender")]),t._v(" 来更新 "),e("code",[t._v("mapping")]),t._v(" 的例子：")]),t._v(" "),e("div",{staticClass:"language-sol extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sol"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mapping")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" favoriteNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMyNumber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v(" _myNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新我们的 `favoriteNumber` 映射来将 `_myNumber`存储在 `msg.sender`名下")]),t._v("\n  favoriteNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sender"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _myNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储数据至映射的方法和将数据存储在数组相似")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("whatIsMyNumber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拿到存储在调用者地址名下的值")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若调用者还没调用 setMyNumber， 则值为 `0`")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" favoriteNumber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sender"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("在这个小小的例子中，任何人都可以调用 "),e("code",[t._v("setMyNumber")]),t._v(" 在我们的合约中存下一个 "),e("code",[t._v("uint")]),t._v(" 并且与他们的地址相绑定。 然后，他们调用 "),e("code",[t._v("whatIsMyNumber")]),t._v(" 就会返回他们存储的 "),e("code",[t._v("uint")]),t._v("。")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("msg.sender")]),t._v(" 很安全，因为它具有以太坊区块链的安全保障 —— 除非窃取与以太坊地址相关联的私钥，否则是没有办法修改其他人的数据的。")]),t._v(" "),e("h3",{attrs:{id:"数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),e("h4",{attrs:{id:"无符号整数-uint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无符号整数-uint"}},[t._v("#")]),t._v(" 无符号整数: "),e("code",[t._v("uint")])]),t._v(" "),e("p",[e("code",[t._v("uint")]),t._v(" 无符号数据类型， 指"),e("strong",[t._v("其值不能是负数")]),t._v("，对于有符号的整数存在名为 "),e("code",[t._v("int")]),t._v(" 的数据类型。")]),t._v(" "),e("blockquote",[e("p",[t._v("注: Solidity中， "),e("code",[t._v("uint")]),t._v(" 实际上是 "),e("code",[t._v("uint256")]),t._v("代名词， 一个256位的无符号整数。你也可以定义位数少的uints — "),e("code",[t._v("uint8")]),t._v("， "),e("code",[t._v("uint16")]),t._v("， "),e("code",[t._v("uint32")]),t._v("， 等…… 但一般来讲你愿意使用简单的 "),e("code",[t._v("uint")]),t._v("， 除非在某些特殊情况下，这我们后面会讲。")])]),t._v(" "),e("h4",{attrs:{id:"字符串-string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串-string"}},[t._v("#")]),t._v(" 字符串: "),e("code",[t._v("string")])]),t._v(" "),e("p",[t._v("字符串用于保存任意长度的 UTF-8 编码数据。 如： "),e("code",[t._v('string greeting = "Hello world!"')]),t._v("。")]),t._v(" "),e("blockquote",[e("p",[t._v("注: Solidity中， "),e("code",[t._v("uint")]),t._v(" 实际上是 "),e("code",[t._v("uint256")]),t._v("代名词， 一个256位的无符号整数。你也可以定义位数少的uints — "),e("code",[t._v("uint8")]),t._v("， "),e("code",[t._v("uint16")]),t._v("， "),e("code",[t._v("uint32")]),t._v("， 等…… 但一般来讲你愿意使用简单的 "),e("code",[t._v("uint")]),t._v("， 除非在某些特殊情况下，这我们后面会讲。")])]),t._v(" "),e("h3",{attrs:{id:"数学运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数学运算"}},[t._v("#")]),t._v(" 数学运算")]),t._v(" "),e("p",[t._v("在 Solidity 中，数学运算很直观明了，与其它程序设计语言相同:")]),t._v(" "),e("ul",[e("li",[t._v("加法: "),e("code",[t._v("x + y")])]),t._v(" "),e("li",[t._v("减法: "),e("code",[t._v("x - y")]),t._v(",")]),t._v(" "),e("li",[t._v("乘法: "),e("code",[t._v("x * y")])]),t._v(" "),e("li",[t._v("除法: "),e("code",[t._v("x / y")])]),t._v(" "),e("li",[t._v("取模 / 求余: "),e("code",[t._v("x % y")]),t._v(" "),e("em",[t._v("(例如, "),e("code",[t._v("13 % 5")]),t._v(" 余 "),e("code",[t._v("3")]),t._v(", 因为13除以5，余3)")])])]),t._v(" "),e("p",[t._v("Solidity 还支持 "),e("strong",[e("em",[t._v("乘方操作")])]),t._v(" (如：x 的 y次方） // 例如： 5 ** 2 = 25")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uint x = 5 ** 2; // equal to 5^2 = 25\n")])])]),e("h3",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),e("p",[t._v("Solidity 支持两种数组: "),e("strong",[t._v("静态")]),t._v("数组 和 "),e("strong",[t._v("动态")]),t._v("数组")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 固定长度为2的静态数组:\nuint[2] fixedArray;\n// 固定长度为5的string类型的静态数组:\nstring[5] stringArray;\n// 动态数组，长度不固定，可以动态添加元素:\nuint[] dynamicArray;\n")])])]),e("p",[t._v("你也可以建立一个 "),e("strong",[t._v("结构体类型")]),t._v("的数组")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Person[] people; // 这是动态数组，我们可以不断添加元素\n")])])]),e("blockquote",[e("p",[t._v("记住：状态变量被==永久保存==在区块链中。所以在你的合约中创建动态数组来保存成结构的数据是非常有意义的。")])]),t._v(" "),e("h4",{attrs:{id:"公共数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#公共数组"}},[t._v("#")]),t._v(" 公共数组")]),t._v(" "),e("p",[t._v("你可以定义 "),e("code",[t._v("public")]),t._v(" 数组, Solidity 会自动创建 "),e("strong",[e("em",[t._v("getter")])]),t._v(" 方法. 语法如下:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Person[] public people;\n")])])]),e("p",[t._v("其它的合约"),e("strong",[t._v("可以")]),t._v("从这个数组"),e("strong",[t._v("读取")]),t._v("数据（但"),e("em",[t._v("不能写入")]),t._v("数据），所以这在合约中是一个有用的保存公共数据的模式。")]),t._v(" "),e("h3",{attrs:{id:"结构体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),e("p",[t._v("有时你需要更复杂的数据类型，Solidity 提供了 "),e("strong",[t._v("结构体")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("struct Person {\n  uint age;\n  string name;\n}\n")])])]),e("p",[t._v("结构体允许你生成一个更复杂的数据类型，它有"),e("em",[t._v("多个属性")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"使用结构体和数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用结构体和数组"}},[t._v("#")]),t._v(" 使用结构体和数组")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("struct Person {\n  uint age;\n  string name;\n}\n\nPerson[] public people;\n")])])]),e("p",[t._v("现在我们创建新的 "),e("code",[t._v("Person")]),t._v(" 结构，然后把它加入到名为 "),e("code",[t._v("people")]),t._v(" 的数组中")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 创建一个新的Person:\nPerson satoshi = Person(172, "Satoshi");\n\n// 将新创建的satoshi添加进people数组:\npeople.push(satoshi);\n')])])]),e("p",[t._v("你也可以两步并一步，用一行代码更简洁:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('people.push(Person(16, "Vitalik"));\n')])])]),e("blockquote",[e("p",[t._v("注："),e("code",[t._v("array.push()")]),t._v(" 在数组的 "),e("strong",[t._v("尾部")]),t._v(" 加入新元素 ，所以元素在数组中的顺序就是我们添加的顺序（和 JS 里一样）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uint[] numbers;\nnumbers.push(5);\nnumbers.push(10);\nnumbers.push(15);\n// numbers is now equal to [5, 10, 15]\n")])])]),e("h3",{attrs:{id:"addresses-地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#addresses-地址"}},[t._v("#")]),t._v(" Addresses （地址）")]),t._v(" "),e("p",[t._v("以太坊区块链由 "),e("strong",[t._v("account")]),t._v(" (账户)组成，你可以把它想象成银行账户。一个帐户的余额是 "),e("strong",[e("em",[t._v("以太")])]),t._v(" （在以太坊区块链上使用的币种）。\n你可以和其他帐户之间支付和接受以太币，就像你的银行帐户可以电汇资金到其他银行帐户一样。")]),t._v(" "),e("p",[t._v("每个帐户都有一个“地址”，你可以把它想象成银行账号。这是账户唯一的标识符，它看起来长这样：")]),t._v(" "),e("p",[e("code",[t._v("0x0cE446255506E92DF41614C46F1d6df9Cc969183")])]),t._v(" "),e("p",[t._v("（这是 CryptoZombies 团队的地址，如果你喜欢 CryptoZombies 的话，请打赏我们一些以太币！😉）")]),t._v(" "),e("p",[t._v("我们将在后面的课程中介绍地址的细节，现在你只需要了解"),e("strong",[t._v("地址属于特定用户（或智能合约）的")]),t._v("。")]),t._v(" "),e("p",[t._v("所以我们可以指定“地址”作为僵尸主人的 ID。当用户通过与我们的应用程序交互来创建新的僵尸时，新僵尸的所有权被设置到调用者的以太坊地址下。")]),t._v(" "),e("h3",{attrs:{id:"mapping-映射"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mapping-映射"}},[t._v("#")]),t._v(" Mapping（映射）")]),t._v(" "),e("p",[t._v("在前面我们看到了 *结构体 和 "),e("em",[t._v("数组")]),t._v(" 。 "),e("strong",[t._v("映射")]),t._v(" 是另一种在 Solidity 中存储有组织数据的方法。")]),t._v(" "),e("p",[t._v("映射是这样定义的：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//对于金融应用程序，将用户的余额保存在一个 uint类型的变量中：\nmapping (address => uint) public accountBalance;\n//或者可以用来通过userId 存储/查找的用户名\nmapping (uint => string) userIdToName;\n")])])]),e("p",[t._v("映射本质上是存储和查找数据所用的键-值对。在第一个例子中，键是一个 "),e("code",[t._v("address")]),t._v("，值是一个 "),e("code",[t._v("uint")]),t._v("，在第二个例子中，键是一个"),e("code",[t._v("uint")]),t._v("，值是一个 "),e("code",[t._v("string")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),e("h3",{attrs:{id:"定义函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义函数"}},[t._v("#")]),t._v(" 定义函数")]),t._v(" "),e("p",[t._v("在 Solidity 中函数定义的句法如下:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function eatHamburgers(string _name, uint _amount) {\n    // ...\n}\n")])])]),e("p",[t._v("这是一个名为 "),e("code",[t._v("eatHamburgers")]),t._v(" 的函数，它接受两个参数：一个 "),e("code",[t._v("string")]),t._v("类型的 和 一个 "),e("code",[t._v("uint")]),t._v("类型的。现在函数内部还是空的。")]),t._v(" "),e("blockquote",[e("p",[t._v("注：: 习惯上函数里的"),e("strong",[t._v("变量都是以( "),e("code",[t._v("_")]),t._v(" )开头")]),t._v(" (但不是硬性规定) 以区别全局变量。")])]),t._v(" "),e("h3",{attrs:{id:"私有-公共函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#私有-公共函数"}},[t._v("#")]),t._v(" 私有 / 公共函数")]),t._v(" "),e("p",[t._v("Solidity 定义的函数的属性默认为"),e("code",[t._v("公共")]),t._v("。 这就意味着任何一方 (或其它合约) 都可以调用你合约里的函数。")]),t._v(" "),e("p",[t._v("显然，不是什么时候都需要这样，而且这样的合约易于受到攻击。 所以将自己的函数定义为"),e("code",[t._v("私有")]),t._v("是一个好的编程习惯，只有当你需要外部世界调用它时才将它设置为"),e("code",[t._v("公共")]),t._v("。")]),t._v(" "),e("p",[t._v("如何定义一个私有的函数呢？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uint[] numbers;\n\nfunction _addToArray(uint _number) private {\n  numbers.push(_number);\n}\n")])])]),e("p",[t._v("这意味着只有我们合约中的其它函数才能够调用这个函数，给 "),e("code",[t._v("numbers")]),t._v(" 数组添加新成员。")]),t._v(" "),e("p",[t._v("可以看到，在函数名字后面使用关键字 "),e("code",[t._v("private")]),t._v(" 即可。和函数的参数类似，私有函数的名字用( "),e("code",[t._v("_")]),t._v(" )起始。")]),t._v(" "),e("h3",{attrs:{id:"函数返回值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数返回值"}},[t._v("#")]),t._v(" 函数返回值")]),t._v(" "),e("p",[t._v("要想函数返回一个数值，按如下定义：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('string greeting = "What\'s up dog";\n\nfunction sayHello() public returns (string) {\n  return greeting;\n}\n')])])]),e("p",[t._v("Solidity 里，函数的定义里可包含返回值的数据类型(如本例中 "),e("code",[t._v("string")]),t._v(")。")]),t._v(" "),e("h3",{attrs:{id:"函数修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数修饰符"}},[t._v("#")]),t._v(" 函数修饰符")]),t._v(" "),e("h4",{attrs:{id:"view-和-pure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#view-和-pure"}},[t._v("#")]),t._v(" view 和 pure")]),t._v(" "),e("p",[t._v("上面的函数实际上没有改变 Solidity 里的状态，即，它没有改变任何值或者写任何东西。")]),t._v(" "),e("p",[t._v("这种情况下我们可以把函数定义为 "),e("strong",[e("em",[t._v("view")])]),t._v(", 意味着它==只能读取数据不能更改数据==")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function sayHello() public view returns (string) {\n")])])]),e("p",[t._v("Solidity 还支持 "),e("strong",[e("em",[t._v("pure")])]),t._v(" 函数, 表明这个函数甚至都不访问应用里的数据，例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function _multiply(uint a, uint b) private pure returns (uint) {\n  return a * b;\n}\n")])])]),e("p",[t._v("这个函数甚至都不读取应用里的状态 — 它的返回值完全取决于它的输入参数，在这种情况下我们把函数定义为 "),e("strong",[e("em",[t._v("pure")])]),t._v(".")]),t._v(" "),e("blockquote",[e("p",[t._v("注：可能很难记住何时把函数标记为 pure/view。 幸运的是， Solidity 编辑器会给出提示，提醒你使用这些修饰符。")])]),t._v(" "),e("h4",{attrs:{id:"internal-和-external"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#internal-和-external"}},[t._v("#")]),t._v(" internal 和 external")]),t._v(" "),e("p",[t._v("除 "),e("code",[t._v("public")]),t._v(" 和 "),e("code",[t._v("private")]),t._v(" 属性之外，Solidity 还使用了另外两个描述函数可见性的修饰词："),e("code",[t._v("internal")]),t._v("（内部） 和 "),e("code",[t._v("external")]),t._v("（外部）。")]),t._v(" "),e("p",[e("code",[t._v("internal")]),t._v(" 和 "),e("code",[t._v("private")]),t._v(" 类似，不过， 如果某个合约继承自其父合约，这个合约即可以访问父合约中定义的“内部”函数。（嘿，这听起来正是我们想要的那样！）。")]),t._v(" "),e("p",[e("code",[t._v("external")]),t._v(" 与"),e("code",[t._v("public")]),t._v(" 类似，只不过这些函数只能在合约之外调用 - 它们不能被合约内的其他函数调用。稍后我们将讨论什么时候使用 "),e("code",[t._v("external")]),t._v(" 和 "),e("code",[t._v("public")]),t._v("。")]),t._v(" "),e("p",[t._v("声明函数 "),e("code",[t._v("internal")]),t._v(" 或 "),e("code",[t._v("external")]),t._v(" 类型的语法，与声明 "),e("code",[t._v("private")]),t._v(" 和 "),e("code",[t._v("public")]),t._v(" 类型相同：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("contract Sandwich {\n  uint private sandwichesEaten = 0;\n\n  function eat() internal {\n    sandwichesEaten++;\n  }\n}\n\ncontract BLT is Sandwich {\n  uint private baconSandwichesEaten = 0;\n\n  function eatWithBacon() public returns (string) {\n    baconSandwichesEaten++;\n    // 因为eat() 是internal 的，所以我们能在这里调用\n    eat();\n  }\n}\n")])])]),e("h3",{attrs:{id:"keccak256-伪随机数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keccak256-伪随机数"}},[t._v("#")]),t._v(" Keccak256 伪随机数")]),t._v(" "),e("p",[t._v("如何让函数返回一个全(半) 随机的 "),e("code",[t._v("uint")]),t._v("?")]),t._v(" "),e("p",[t._v("Ethereum 内部有一个散列函数"),e("code",[t._v("keccak256")]),t._v("，它用了SHA3版本。一个散列函数基本上就是把一个字符串转换为一个256位的16进制数字。字符串的一个微小变化会引起散列数据极大变化。")]),t._v(" "),e("p",[t._v("这在 Ethereum 中有很多应用，但是现在我们只是用它造一个伪随机数。")]),t._v(" "),e("p",[t._v("例子:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//6e91ec6b618bb462a4a6ee5aa2cb0e9cf30f7a052bb467b0ba58b8748c00d2e5\nkeccak256("aaaab");\n//b1f078126895a1424524de5321b339ab00408010b7cf0e6ed451514981e58aa9\nkeccak256("aaaac");\n')])])]),e("p",[t._v("显而易见，输入字符串只改变了一个字母，输出就已经天壤之别了。")]),t._v(" "),e("blockquote",[e("p",[t._v("注: 在区块链中==安全地==产生一个随机数是一个很难的问题， 本例的方法不安全，但是在我们的Zombie DNA算法里不是那么重要，已经很好地满足我们的需要了。")])]),t._v(" "),e("h2",{attrs:{id:"类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),e("p",[t._v("有时你需要变换数据类型。例如:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uint8 a = 5;\nuint b = 6;\n// 将会抛出错误，因为 a * b 返回 uint, 而不是 uint8:\nuint8 c = a * b;\n// 我们需要将 b 转换为 uint8:\nuint8 c = a * uint8(b);\n")])])]),e("p",[t._v("上面, "),e("code",[t._v("a * b")]),t._v(" 返回类型是 "),e("code",[t._v("uint")]),t._v(", 但是当我们尝试用 "),e("code",[t._v("uint8")]),t._v(" 类型接收时, 就会造成潜在的错误。如果把它的数据类型转换为 "),e("code",[t._v("uint8")]),t._v(", 就可以了，编译器也不会出错。")]),t._v(" "),e("h2",{attrs:{id:"事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),e("p",[t._v("我们的合约几乎就要完成了！让我们加上一个"),e("strong",[t._v("事件")])]),t._v(" "),e("p",[e("strong",[t._v("事件")]),t._v(" 是合约和区块链通讯的一种机制。你的前端应用“监听”某些事件，并做出反应。")]),t._v(" "),e("p",[t._v("例子:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 这里建立事件\nevent IntegersAdded(uint x, uint y, uint result);\n\nfunction add(uint _x, uint _y) public {\n  uint result = _x + _y;\n  //触发事件，通知app\n  IntegersAdded(_x, _y, result);\n  return result;\n}\n")])])]),e("p",[t._v("你的 app 前端可以监听这个事件。JavaScript 实现如下:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("YourContract"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IntegersAdded")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"web3-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#web3-js"}},[t._v("#")]),t._v(" Web3.js")]),t._v(" "),e("p",[t._v("我们的 Solidity 合约完工了！ 现在我们要写一段 JavaScript 前端代码来调用这个合约。")]),t._v(" "),e("p",[t._v("以太坊有一个 JavaScript 库，名为"),e("strong",[t._v("Web3.js")]),t._v("。")]),t._v(" "),e("p",[t._v("在后面的课程里，我们会进一步地教你如何安装一个合约，如何设置 Web3.js 。 但是现在我们通过一段代码来了解 Web3.js 是如何和我们发布的合约交互的吧。")]),t._v(" "),e("p",[t._v("如果下面的代码你不能全都理解，不用担心。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面是调用合约的方式:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" abi "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* abi是由编译器生成的 */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ZombieFactoryContract "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" web3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eth"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("contract")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("abi"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" contractAddress "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 发布之后在以太坊上生成的合约地址 */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ZombieFactory "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ZombieFactoryContract"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("at")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contractAddress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `ZombieFactory` 能访问公共的函数以及事件")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 某个监听文本输入的监听器:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#ourButton"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("click")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#nameInput"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("val")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用合约的 `createRandomZombie` 函数:")]),t._v("\n  ZombieFactory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRandomZombie")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听 `NewZombie` 事件, 并且更新UI")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" event "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ZombieFactory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewZombie")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateZombie")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zombieId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dna"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 Zombie 的 dna, 更新图像")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateZombie")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dna")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dnaStr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dna"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果dna少于16位,在它前面用0补上")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dnaStr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    dnaStr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dnaStr\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" zombieDetails "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前两位数构成头部.我们可能有7种头部, 所以 % 7")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 得到的数在0-6,再加上1,数的范围变成1-7")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过这样计算：")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("headChoice")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" dnaStr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("，\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们得到的图片名称从head1.png 到 head7.png")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接下来的两位数构成眼睛, 眼睛变化就对11取模:")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("eyeChoice")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" dnaStr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再接下来的两位数构成衣服，衣服变化就对6取模:")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("shirtChoice")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" dnaStr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最后6位控制颜色. 用css选择器: hue-rotate来更新")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 360度:")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("skinColorChoice")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dnaStr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("360")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("eyeColorChoice")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dnaStr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("360")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("clothesColorChoice")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dnaStr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("substring")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("360")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("zombieName")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("zombieDescription")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A Level 1 CryptoZombie"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" zombieDetails\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("我们的 JavaScript 所做的就是获取由"),e("code",[t._v("zombieDetails")]),t._v(" 产生的数据, 并且利用浏览器里的 JavaScript 神奇功能 (我们用 Vue.js)，置换出图像以及使用CSS过滤器。在后面的课程中，你可以看到全部的代码。")]),t._v(" "),e("h2",{attrs:{id:"require"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#require"}},[t._v("#")]),t._v(" Require")]),t._v(" "),e("p",[e("code",[t._v("require")]),t._v("使得函数在执行过程中，当不满足某些条件时抛出错误，并停止执行：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function sayHiToVitalik(string _name) public returns (string) {\n  // 比较 _name 是否等于 "Vitalik". 如果不成立，抛出异常并终止程序\n  require(keccak256(_name) == keccak256("Vitalik"));\n  // 如果返回 true, 运行如下语句\n  return "Hi!";\n}\n')])])]),e("p",[t._v("如果你这样调用函数 "),e("code",[t._v("sayHiToVitalik（“Vitalik”）")]),t._v(" ,它会返回“Hi！”。而如果调用的时候使用了其他参数，它则会抛出错误并停止执行。")]),t._v(" "),e("p",[t._v("因此，在调用一个函数之前，用 "),e("code",[t._v("require")]),t._v(" 验证前置条件是非常有必要的。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意： Solidity 并==不支持原生的字符串比较==, 我们只能通过比较两个字符串的 keccak256 哈希值来进行判断)")])]),t._v(" "),e("h2",{attrs:{id:"继承-inheritance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承-inheritance"}},[t._v("#")]),t._v(" 继承（Inheritance）")]),t._v(" "),e("p",[t._v("当代码过于冗长的时候，最好将代码和逻辑分拆到多个不同的合约中，以便于管理。")]),t._v(" "),e("p",[t._v("有个让 Solidity 的代码易于管理的功能，就是合约 "),e("strong",[e("em",[t._v("inheritance")])]),t._v(" (继承)：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('contract Doge {\n  function catchphrase() public returns (string) {\n    return "So Wow CryptoDoge";\n  }\n}\n\ncontract BabyDoge is Doge {\n  function anotherCatchphrase() public returns (string) {\n    return "Such Moon BabyDoge";\n  }\n}\n')])])]),e("p",[t._v("由于 "),e("code",[t._v("BabyDoge")]),t._v(" 是从 "),e("code",[t._v("Doge")]),t._v(" 那里 "),e("strong",[e("em",[t._v("inherits")])]),t._v(" （继承)过来的。 这意味着当你编译和部署了 "),e("code",[t._v("BabyDoge")]),t._v("，它将可以访问 "),e("code",[t._v("catchphrase()")]),t._v(" 和 "),e("code",[t._v("anotherCatchphrase()")]),t._v("和其他我们在 "),e("code",[t._v("Doge")]),t._v(" 中定义的其他公共函数。")]),t._v(" "),e("p",[t._v("这可以用于逻辑继承（比如表达子类的时候，"),e("code",[t._v("Cat")]),t._v(" 是一种 "),e("code",[t._v("Animal")]),t._v("）。 但也可以简单地将类似的逻辑组合到不同的合约中以组织代码。")]),t._v(" "),e("h2",{attrs:{id:"导入-import"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导入-import"}},[t._v("#")]),t._v(" 导入（Import）")]),t._v(" "),e("p",[t._v("在 Solidity 中，当你有多个文件并且想把一个文件导入另一个文件时，可以使用 "),e("code",[t._v("import")]),t._v(" 语句：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import "./someothercontract.sol";\n\ncontract newContract is SomeOtherContract {\n\t// ...\n}\n')])])]),e("h2",{attrs:{id:"变量存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量存储"}},[t._v("#")]),t._v(" 变量存储")]),t._v(" "),e("p",[t._v("在 Solidity 中，有两个地方可以存储变量 —— "),e("code",[t._v("storage")]),t._v(" 或 "),e("code",[t._v("memory")]),t._v("。")]),t._v(" "),e("p",[e("strong",[e("em",[t._v("Storage")])]),t._v(" 变量是指==永久存储==在区块链中的变量。 "),e("strong",[e("em",[t._v("Memory")])]),t._v(" 变量则是临时的，当外部函数对某合约调用完成时，内存型变量即被移除。 你可以把它想象成存储在你电脑的硬盘或是RAM中数据的关系。")]),t._v(" "),e("p",[t._v("大多数时候你都用不到这些关键字，默认情况下 Solidity 会自动处理它们。")]),t._v(" "),e("p",[e("em",[t._v("状态变量")]),t._v("（在函数之外声明的变量）默认为“存储”形式，并永久写入区块链；而在函数内部声明的变量是“内存”型的，它们函数调用结束后消失。")]),t._v(" "),e("blockquote",[e("p",[t._v("然而也有一些情况下，你需要手动声明存储类型，主要用于处理函数内的 "),e("strong",[t._v("结构体")]),t._v(" 和 "),e("strong",[t._v("数组")]),t._v(" 时：")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('contract SandwichFactory {\n  struct Sandwich {\n    string name;\n    string status;\n  }\n\n  Sandwich[] sandwiches;\n\n  function eatSandwich(uint _index) public {\n    // Sandwich mySandwich = sandwiches[_index];\n    // ^ 看上去很直接，不过 Solidity 将会给出警告\n    // 告诉你应该明确在这里定义 `storage` 或者 `memory`。\n\n    // 所以你应该明确定义 `storage`:\n    Sandwich storage mySandwich = sandwiches[_index];\n    // ...这里 `mySandwich` 是指向 `sandwiches[_index]`的指针\n    mySandwich.status = "Eaten!";\n    // ^这将永久把 `sandwiches[_index]` 变为区块链上的存储\n\n    // 如果你只想要一个副本，可以使用`memory`:\n    Sandwich memory anotherSandwich = sandwiches[_index + 1];\n    // ...这样 `anotherSandwich` 就仅仅是一个内存里的副本了\n    anotherSandwich.status = "Eaten!";\n    // ^这将仅仅修改临时变量，对 `sandwiches[_index + 1]` 没有任何影响\n    // 不过你可以这样做:\n    sandwiches[_index + 1] = anotherSandwich;\n    // ...如果你想把副本的改动保存回区块链存储\n  }\n}\n')])])]),e("p",[t._v("如果你还没有完全理解究竟应该使用哪一个，也不用担心 —— 在本教程中，我们将告诉你何时使用 "),e("code",[t._v("storage")]),t._v(" 或是 "),e("code",[t._v("memory")]),t._v("，并且当你不得不使用到这些关键字的时候，Solidity 编译器也发警示提醒你的。")]),t._v(" "),e("p",[t._v("现在，只要知道在某些场合下也需要你显式地声明 "),e("code",[t._v("storage")]),t._v(" 或 "),e("code",[t._v("memory")]),t._v("就够了！")]),t._v(" "),e("p",[t._v("还有一个 "),e("strong",[e("em",[t._v("Calldata")])]),t._v(" 类型,也是存在内存里面。与"),e("code",[t._v("memory")]),t._v("的不同点在于"),e("code",[t._v("calldata")]),t._v("变量不能修改（"),e("code",[t._v("immutable")]),t._v("），一般用于函数的参数。")]),t._v(" "),e("p",[t._v("例子：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function fCalldata(uint[] calldata _x) public pure returns(uint[] calldata){        \n\t//参数为calldata数组，不能被修改        \n\t// _x[0] = 0 //这样修改会报错        \n\treturn(_x);    \n}\n")])])]),e("p",[t._v("在不同存储类型相互赋值时候，有时会产生独立的副本（修改新变量不会影响原变量），有时会产生引用（修改新变量会影响原变量）。规则如下：")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("storage")]),t._v("（合约的状态变量）赋值给本地 "),e("code",[t._v("storage")]),t._v("（函数里的）时候，会创建引用，改变新变量会影响原变量。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("storage")]),t._v(" 赋值给 "),e("code",[t._v("memory")]),t._v(" ，会创建独立的复本，修改其中一个不会影响另一个；反之亦然。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("memory")]),t._v(" 赋值给 "),e("code",[t._v("memory")]),t._v(" ，会创建引用，改变新变量会影响原变量。")])]),t._v(" "),e("li",[e("p",[t._v("其他情况，变量赋值给 "),e("code",[t._v("storage")]),t._v(" ，会创建独立的复本，修改其中一个不会影响另一个。")])])]),t._v(" "),e("h2",{attrs:{id:"与其他合约的交互"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与其他合约的交互"}},[t._v("#")]),t._v(" 与其他合约的交互")]),t._v(" "),e("p",[t._v("如果我们的合约需要和区块链上的其他的合约会话，则需先定义一个 "),e("strong",[e("em",[t._v("interface")])]),t._v(" (接口)。")]),t._v(" "),e("p",[t._v("先举一个简单的栗子。 假设在区块链上有这么一个合约：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("contract LuckyNumber {\n  mapping(address => uint) numbers;\n\n  function setNum(uint _num) public {\n    numbers[msg.sender] = _num;\n  }\n\n  function getNum(address _myAddress) public view returns (uint) {\n    return numbers[_myAddress];\n  }\n}\n")])])]),e("p",[t._v("这是个很简单的合约，您可以用它存储自己的幸运号码，并将其与您的以太坊地址关联。 这样其他人就可以通过您的地址查找您的幸运号码了。")]),t._v(" "),e("p",[t._v("现在假设我们有一个外部合约，使用 "),e("code",[t._v("getNum")]),t._v(" 函数可读取其中的数据。")]),t._v(" "),e("p",[t._v("首先，我们定义 "),e("code",[t._v("LuckyNumber")]),t._v(" 合约的 "),e("strong",[e("em",[t._v("interface")])]),t._v(" ：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("contract NumberInterface {\n  function getNum(address _myAddress) public view returns (uint);\n}\n")])])]),e("p",[t._v("请注意，这个过程虽然看起来像在定义一个合约，但其实内里不同：")]),t._v(" "),e("p",[t._v("首先，我们只声明了要与之交互的函数 —— 在本例中为 "),e("code",[t._v("getNum")]),t._v(" —— 在其中我们没有使用到任何其他的函数或状态变量。")]),t._v(" "),e("p",[t._v("其次，我们并没有使用大括号（"),e("code",[t._v("{")]),t._v(" 和 "),e("code",[t._v("}")]),t._v("）定义函数体，我们单单用分号（"),e("code",[t._v(";")]),t._v("）结束了函数声明。这使它看起来像一个合约框架。")]),t._v(" "),e("p",[t._v("编译器就是靠这些特征认出它是一个接口的。")]),t._v(" "),e("p",[t._v("在我们的 app 代码中使用这个接口，合约就知道其他合约的函数是怎样的，应该如何调用，以及可期待什么类型的返回值。")]),t._v(" "),e("p",[t._v("在下一课中，我们将真正调用其他合约的函数。目前我们只要声明一个接口，用于调用 CryptoKitties 合约就行了。")]),t._v(" "),e("h2",{attrs:{id:"使用接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用接口"}},[t._v("#")]),t._v(" 使用接口")]),t._v(" "),e("p",[t._v("继续前面 "),e("code",[t._v("NumberInterface")]),t._v(" 的例子，我们既然将接口定义为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("contract NumberInterface {\n  function getNum(address _myAddress) public view returns (uint);\n}\n")])])]),e("p",[t._v("我们可以在合约中这样使用：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("contract MyContract {\n  address NumberInterfaceAddress = 0xab38...;\n  // ^ 这是FavoriteNumber合约在以太坊上的地址\n  NumberInterface numberContract = NumberInterface(NumberInterfaceAddress);\n  // 现在变量 `numberContract` 指向另一个合约对象\n  // (即: 使用 NumberInterfaceAddress 初始化)\n\n  function someFunction() public {\n    // 现在我们可以调用在那个合约中声明的 `getNum`函数:\n    uint num = numberContract.getNum(msg.sender);\n    // ...在这儿使用 `num`变量做些什么\n  }\n}\n")])])]),e("p",[t._v("通过这种方式，只要将您合约的可见性设置为"),e("code",[t._v("public")]),t._v("(公共)或"),e("code",[t._v("external")]),t._v("(外部)，它们就可以与以太坊区块链上的任何其他合约进行交互。")]),t._v(" "),e("h2",{attrs:{id:"处理多返回值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理多返回值"}},[t._v("#")]),t._v(" 处理多返回值")]),t._v(" "),e("p",[e("code",[t._v("getKitty")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("contract KittyInterface {\n\tfunction getKitty(uint256 _id) external view returns (\n\t\tbool isGestating,\n\t\tbool isReady,\n\t\tuint256 cooldownIndex,\n\t\tuint256 nextActionAt,\n\t\tuint256 siringWithId,\n\t\tuint256 birthTime,\n\t\tuint256 matronId,\n\t\tuint256 sireId,\n\t\tuint256 generation,\n\t\tuint256 genes\n\t);\n}\n")])])]),e("p",[e("code",[t._v("getKitty")]),t._v(" 是我们所看到的第一个返回多个值的函数。我们来看看是如何处理的：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function multipleReturns() internal returns(uint a, uint b, uint c) {\n  return (1, 2, 3);\n}\n\nfunction processMultipleReturns() external {\n  uint a;\n  uint b;\n  uint c;\n  // 这样来做批量赋值:\n  (a, b, c) = multipleReturns();\n}\n\n// 或者如果我们只想返回其中一个变量:\nfunction getLastReturnValue() external {\n  uint c;\n  // 可以对其他字段留空:\n  // 感觉这里有点类似解构赋值那种\n  (,,c) = multipleReturns();\n}\n")])])]),e("h2",{attrs:{id:"if-语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if-语句"}},[t._v("#")]),t._v(" if 语句")]),t._v(" "),e("p",[t._v("if语句的语法在 Solidity 中，与在 JavaScript 中差不多：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('function eatBLT(string sandwich) public {\n  // 看清楚了，当我们比较字符串的时候，需要比较他们的 keccak256 哈希码\n  if (keccak256(sandwich) == keccak256("BLT")) {\n    eat();\n  }\n}\n')])])]),e("h2",{attrs:{id:"javascript-实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-实现"}},[t._v("#")]),t._v(" JavaScript 实现")]),t._v(" "),e("p",[t._v("我们只用编译和部署 "),e("code",[t._v("ZombieFeeding")]),t._v("，就可以将这个合约部署到以太坊了。我们最终完成的这个合约继承自 "),e("code",[t._v("ZombieFactory")]),t._v("，因此它可以访问自己和父辈合约中的所有 public 方法。")]),t._v(" "),e("p",[t._v("我们来看一个与我们的刚部署的合约进行交互的例子， 这个例子使用了 JavaScript 和 web3.js：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var abi = /* abi generated by the compiler */\nvar ZombieFeedingContract = web3.eth.contract(abi)\nvar contractAddress = /* our contract address on Ethereum after deploying */\nvar ZombieFeeding = ZombieFeedingContract.at(contractAddress)\n\n// 假设我们有我们的僵尸ID和要攻击的猫咪ID\nlet zombieId = 1;\nlet kittyId = 1;\n\n// 要拿到猫咪的DNA，我们需要调用它的API。这些数据保存在它们的服务器上而不是区块链上。\n// 如果一切都在区块链上，我们就不用担心它们的服务器挂了，或者它们修改了API，\n// 或者因为不喜欢我们的僵尸游戏而封杀了我们\nlet apiUrl = "https://api.cryptokitties.co/kitties/" + kittyId\n$.get(apiUrl, function(data) {\n  let imgUrl = data.image_url\n  // 一些显示图片的代码\n})\n\n// 当用户点击一只猫咪的时候:\n$(".kittyImage").click(function(e) {\n  // 调用我们合约的 `feedOnKitty` 函数\n  ZombieFeeding.feedOnKitty(zombieId, kittyId)\n})\n\n// 侦听来自我们合约的新僵尸事件好来处理\nZombieFactory.NewZombie(function(error, result) {\n  if (error) return\n  // 这个函数用来显示僵尸:\n  generateZombie(result.zombieId, result.name, result.dna)\n})\n')])])]),e("h2",{attrs:{id:"第1章-智能协议的永固性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第1章-智能协议的永固性"}},[t._v("#")]),t._v(" 第1章: 智能协议的永固性")]),t._v(" "),e("p",[t._v("到现在为止，我们讲的 Solidity 和其他语言没有质的区别，它长得也很像 JavaScript。")]),t._v(" "),e("p",[t._v("但是，在有几点以太坊上的 DApp 跟普通的应用程序有着天壤之别。")]),t._v(" "),e("p",[t._v("第一个例子，在你把智能协议传上以太坊之后，它就变得**"),e("em",[t._v("不可更改")]),t._v("**, 这种永固性意味着你的代码永远不能被调整或更新。")]),t._v(" "),e("p",[t._v("你编译的程序会一直，永久的，不可更改的，存在以太坊上。这就是 Solidity 代码的安全性如此重要的一个原因。如果你的智能协议有任何漏洞，即使你发现了也无法补救。你只能让你的用户们放弃这个智能协议，然后转移到一个新的修复后的合约上。")]),t._v(" "),e("p",[t._v("但这恰好也是智能合约的一大优势。代码说明一切。如果你去读智能合约的代码，并验证它，你会发现，一旦函数被定义下来，每一次的运行，程序都会严格遵照函数中原有的代码逻辑一丝不苟地执行，完全不用担心函数被人篡改而得到意外的结果。")]),t._v(" "),e("h2",{attrs:{id:"外部依赖关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#外部依赖关系"}},[t._v("#")]),t._v(" 外部依赖关系")]),t._v(" "),e("p",[t._v("在第2课中，我们将加密小猫（CryptoKitties）合约的地址硬编码到 DApp 中去了。有没有想过，如果加密小猫出了点问题，比方说，集体消失了会怎么样？ 虽然这种事情几乎不可能发生，但是，如果小猫没了，我们的 DApp 也会随之失效 -- 因为我们在 DApp 的代码中用“硬编码”的方式指定了加密小猫的地址，如果这个根据地址找不到小猫，我们的僵尸也就吃不到小猫了，而按照前面的描述，我们却没法修改合约去应付这个变化！")]),t._v(" "),e("p",[t._v("因此，我们不能硬编码，而要采用“函数”，以便于 DApp 的关键部分可以以参数形式修改。")]),t._v(" "),e("p",[t._v("比方说，我们不再一开始就把猎物地址给写入代码，而是写个函数 "),e("code",[t._v("setKittyContractAddress")]),t._v(", 运行时再设定猎物的地址，这样我们就可以随时去锁定新的猎物，也不用担心加密小猫集体消失了。")]),t._v(" "),e("p",[t._v("如果一个函数的可见性申明为“外部的”（"),e("code",[t._v("external")]),t._v("），任何人都可以调用它！ 也就是说，任何调用该函数的人都可以更改 CryptoKitties 合约的地址，使得其他人都没法再运行我们的程序了。")]),t._v(" "),e("p",[t._v("我们确实是希望这个地址能够在合约中修改，但我可没说让每个人去改它呀。")]),t._v(" "),e("p",[t._v("要对付这样的情况，通常的做法是指定合约的“所有权” - 就是说，给它指定一个主人（没错，就是您），只有主人对它享有特权。")]),t._v(" "),e("h2",{attrs:{id:"openzeppelin库的ownable-合约"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#openzeppelin库的ownable-合约"}},[t._v("#")]),t._v(" OpenZeppelin库的"),e("code",[t._v("Ownable")]),t._v(" 合约")]),t._v(" "),e("p",[t._v("下面是一个 "),e("code",[t._v("Ownable")]),t._v(" 合约的例子： 来自 "),e("strong",[t._v("_ OpenZeppelin _")]),t._v(" Solidity 库的 "),e("code",[t._v("Ownable")]),t._v(" 合约。 OpenZeppelin 是主打安保和社区审查的智能合约库，您可以在自己的 DApps中引用。等把这一课学完，您不要催我们发布下一课，最好利用这个时间把 OpenZeppelin 的网站看看，保管您会学到很多东西！")]),t._v(" "),e("p",[t._v("把楼下这个合约读读通，是不是还有些没见过代码？别担心，我们随后会解释。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of "user permissions".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n')])])]),e("p",[t._v("下面有没有您没学过的东东？")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("构造函数："),e("code",[t._v("function Ownable()")]),t._v("是一个 "),e("strong",[t._v("_ constructor_")]),t._v(" (构造函数)，构造函数不是必须的，它与合约同名，构造函数一生中唯一的一次执行，就是在合约最初被创建的时候。")])]),t._v(" "),e("li",[e("p",[t._v("函数修饰符："),e("code",[t._v("modifier onlyOwner()")]),t._v("。 修饰符跟函数很类似，不过是用来修饰其他已有函数用的， 在其他语句执行前，为它检查下先验条件。 在这个例子中，我们就可以写个修饰符 "),e("code",[t._v("onlyOwner")]),t._v(" 检查下调用者，确保只有合约的主人才能运行本函数。我们下一章中会详细讲述修饰符，以及那个奇怪的"),e("code",[t._v("_;")]),t._v("。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("indexed")]),t._v(" 关键字：别担心，我们还用不到它。")])])]),t._v(" "),e("p",[t._v("所以"),e("code",[t._v("Ownable")]),t._v(" 合约基本都会这么干：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("合约创建，构造函数先行，将其 "),e("code",[t._v("owner")]),t._v(" 设置为"),e("code",[t._v("msg.sender")]),t._v("（其部署者）")])]),t._v(" "),e("li",[e("p",[t._v("为它加上一个修饰符 "),e("code",[t._v("onlyOwner")]),t._v("，它会限制陌生人的访问，将访问某些函数的权限锁定在 "),e("code",[t._v("owner")]),t._v(" 上。")])]),t._v(" "),e("li",[e("p",[t._v("允许将合约所有权转让给他人。")])])]),t._v(" "),e("p",[e("code",[t._v("onlyOwner")]),t._v(" 简直人见人爱，大多数人开发自己的 Solidity DApps，都是从复制/粘贴 "),e("code",[t._v("Ownable")]),t._v(" 开始的，从它再继承出的子类，并在之上进行功能开发。")]),t._v(" "),e("p",[t._v("既然我们想把 "),e("code",[t._v("setKittyContractAddress")]),t._v(" 限制为 "),e("code",[t._v("onlyOwner")]),t._v(" ，我们也要做同样的事情。")]),t._v(" "),e("h2",{attrs:{id:"函数修饰符-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数修饰符-2"}},[t._v("#")]),t._v(" 函数修饰符")]),t._v(" "),e("p",[t._v("函数修饰符看起来跟函数没什么不同，不过关键字"),e("code",[t._v("modifier")]),t._v(" 告诉编译器，这是个"),e("code",[t._v("modifier(修饰符)")]),t._v("，而不是个"),e("code",[t._v("function(函数)")]),t._v("。它不能像函数那样被直接调用，只能被添加到函数定义的末尾，用以改变函数的行为。")]),t._v(" "),e("p",[t._v("咱们仔细读读 "),e("code",[t._v("onlyOwner")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n * @dev 调用者不是‘主人’，就会抛出异常\n */\nmodifier onlyOwner() {\n  require(msg.sender == owner);\n  _;\n}\n")])])]),e("p",[e("code",[t._v("onlyOwner")]),t._v(" 函数修饰符是这么用的：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('contract MyContract is Ownable {\n  event LaughManiacally(string laughter);\n\n  //注意！ `onlyOwner`上场 :\n  function likeABoss() external onlyOwner {\n    LaughManiacally("Muahahahaha");\n  }\n}\n')])])]),e("p",[t._v("注意 "),e("code",[t._v("likeABoss")]),t._v(" 函数上的 "),e("code",[t._v("onlyOwner")]),t._v(" 修饰符。 当你调用 "),e("code",[t._v("likeABoss")]),t._v(" 时，"),e("strong",[t._v("首先执行")]),t._v(" "),e("code",[t._v("onlyOwner")]),t._v(" 中的代码， 执行到 "),e("code",[t._v("onlyOwner")]),t._v(" 中的 "),e("code",[t._v("_;")]),t._v(" 语句时，程序再返回并执行 "),e("code",[t._v("likeABoss")]),t._v(" 中的代码。")]),t._v(" "),e("p",[t._v("可见，尽管函数修饰符也可以应用到各种场合，但最常见的还是放在函数执行之前添加快速的 "),e("code",[t._v("require")]),t._v("检查。")]),t._v(" "),e("p",[t._v("因为给函数添加了修饰符 "),e("code",[t._v("onlyOwner")]),t._v("，使得"),e("strong",[t._v("唯有合约的主人")]),t._v("（也就是部署者）才能调用它。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意：主人对合约享有的特权当然是正当的，不过也可能被恶意使用。比如，万一，主人添加了个后门，允许他偷走别人的僵尸呢？")])]),t._v(" "),e("blockquote",[e("p",[t._v("所以非常重要的是，部署在以太坊上的 DApp，并不能保证它真正做到去中心，你需要阅读并理解它的源代码，才能防止其中没有被部署者恶意植入后门；作为开发人员，如何做到既要给自己留下修复 bug 的余地，又要尽量地放权给使用者，以便让他们放心你，从而愿意把数据放在你的 DApp 中，这确实需要个微妙的平衡。")])]),t._v(" "),e("h2",{attrs:{id:"第4章-gas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第4章-gas"}},[t._v("#")]),t._v(" 第4章: Gas")]),t._v(" "),e("p",[t._v("厉害！现在我们懂了如何在禁止第三方修改我们的合约的同时，留个后门给咱们自己去修改。")]),t._v(" "),e("p",[t._v("让我们来看另一种使得 Solidity 编程语言与众不同的特征：")]),t._v(" "),e("h3",{attrs:{id:"gas-驱动以太坊dapps的能源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gas-驱动以太坊dapps的能源"}},[t._v("#")]),t._v(" Gas - 驱动以太坊DApps的能源")]),t._v(" "),e("p",[t._v("在 Solidity 中，你的用户想要每次执行你的 DApp 都需要支付一定的 "),e("strong",[e("em",[t._v("gas")])]),t._v("，gas 可以用以太币购买，因此，用户每次跑 DApp 都得花费以太币。")]),t._v(" "),e("p",[t._v("一个 DApp 收取多少 gas 取决于功能逻辑的复杂程度。每个操作背后，都在计算完成这个操作所需要的计算资源，（比如，存储数据就比做个加法运算贵得多）， 一次操作所需要花费的 "),e("strong",[e("em",[t._v("gas")])]),t._v(" 等于这个操作背后的所有运算花销的总和。")]),t._v(" "),e("p",[t._v("由于运行你的程序需要花费用户的真金白银，在以太坊中代码的编程语言，比其他任何编程语言都更强调优化。同样的功能，使用笨拙的代码开发的程序，比起经过精巧优化的代码来，运行花费更高，这显然会给成千上万的用户带来大量不必要的开销。")]),t._v(" "),e("h3",{attrs:{id:"为什么要用-gas-来驱动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用-gas-来驱动"}},[t._v("#")]),t._v(" 为什么要用 "),e("strong",[e("em",[t._v("gas")])]),t._v(" 来驱动？")]),t._v(" "),e("p",[t._v("以太坊就像一个巨大、缓慢、但非常安全的电脑。当你运行一个程序的时候，网络上的每一个节点都在进行相同的运算，以验证它的输出 —— 这就是所谓的“去中心化” 由于数以千计的节点同时在验证着每个功能的运行，这可以确保它的数据不会被被监控，或者被刻意修改。")]),t._v(" "),e("p",[t._v("可能会有用户用无限循环堵塞网络，抑或用密集运算来占用大量的网络资源，为了防止这种事情的发生，以太坊的创建者为以太坊上的资源制定了价格，想要在以太坊上运算或者存储，你需要先付费。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意：如果你使用侧链，倒是不一定需要付费，比如咱们在 Loom Network 上构建的 CryptoZombies 就免费。你不会想要在以太坊主网上玩儿“魔兽世界”吧？ - 所需要的 gas 可能会买到你破产。但是你可以找个算法理念不同的侧链来玩它。我们将在以后的课程中咱们会讨论到，什么样的 DApp 应该部署在太坊主链上，什么又最好放在侧链。")])]),t._v(" "),e("h3",{attrs:{id:"省-gas-的招数-结构封装-struct-packing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#省-gas-的招数-结构封装-struct-packing"}},[t._v("#")]),t._v(" 省 gas 的招数：结构封装 （Struct packing）")]),t._v(" "),e("p",[t._v("在第1课中，我们提到除了基本版的 "),e("code",[t._v("uint")]),t._v(" 外，还有其他变种 "),e("code",[t._v("uint")]),t._v("："),e("code",[t._v("uint8")]),t._v("，"),e("code",[t._v("uint16")]),t._v("，"),e("code",[t._v("uint32")]),t._v("等。")]),t._v(" "),e("p",[t._v("通常情况下我们不会考虑使用 "),e("code",[t._v("uint")]),t._v(" 变种，因为无论如何定义 "),e("code",[t._v("uint")]),t._v("的大小，Solidity 为它保留256位的存储空间。例如，使用 "),e("code",[t._v("uint8")]),t._v(" 而不是"),e("code",[t._v("uint")]),t._v("（"),e("code",[t._v("uint256")]),t._v("）不会为你节省任何 gas。")]),t._v(" "),e("p",[t._v("除非，把 "),e("code",[t._v("uint")]),t._v(" 绑定到 "),e("code",[t._v("struct")]),t._v(" 里面。")]),t._v(" "),e("p",[t._v("如果一个 "),e("code",[t._v("struct")]),t._v(" 中有多个 "),e("code",[t._v("uint")]),t._v("，则尽可能使用较小的 "),e("code",[t._v("uint")]),t._v(", Solidity 会将这些 "),e("code",[t._v("uint")]),t._v(" 打包在一起，从而占用较少的存储空间。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("struct NormalStruct {\n  uint a;\n  uint b;\n  uint c;\n}\n\nstruct MiniMe {\n  uint32 a;\n  uint32 b;\n  uint c;\n}\n\n// 因为使用了结构打包，`mini` 比 `normal` 占用的空间更少\nNormalStruct normal = NormalStruct(10, 20, 30);\nMiniMe mini = MiniMe(10, 20, 30); \n")])])]),e("p",[t._v("所以，当 "),e("code",[t._v("uint")]),t._v(" 定义在一个 "),e("code",[t._v("struct")]),t._v(" 中的时候，尽量使用最小的整数子类型以节约空间。 并且把同样类型的变量放一起（即在 struct 中将把变量按照类型依次放置），这样 Solidity 可以将存储空间最小化。例如，有两个 "),e("code",[t._v("struct")]),t._v("：")]),t._v(" "),e("p",[e("code",[t._v("uint c; uint32 a; uint32 b;")]),t._v(" 和 "),e("code",[t._v("uint32 a; uint c; uint32 b;")])]),t._v(" "),e("p",[t._v("前者比后者需要的gas更少，因为前者把"),e("code",[t._v("uint32")]),t._v("放一起了。")]),t._v(" "),e("h2",{attrs:{id:"第5章-时间单位"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第5章-时间单位"}},[t._v("#")]),t._v(" 第5章: 时间单位")]),t._v(" "),e("p",[e("code",[t._v("level")]),t._v(" 属性表示僵尸的级别。以后，在我们创建的战斗系统中，打胜仗的僵尸会逐渐升级并获得更多的能力。")]),t._v(" "),e("p",[e("code",[t._v("readyTime")]),t._v(" 稍微复杂点。我们希望增加一个“冷却周期”，表示僵尸在两次猎食或攻击之之间必须等待的时间。如果没有它，僵尸每天可能会攻击和繁殖1,000次，这样游戏就太简单了。")]),t._v(" "),e("p",[t._v("为了记录僵尸在下一次进击前需要等待的时间，我们使用了 Solidity 的时间单位。")]),t._v(" "),e("h3",{attrs:{id:"时间单位"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#时间单位"}},[t._v("#")]),t._v(" 时间单位")]),t._v(" "),e("p",[t._v("Solidity 使用自己的本地时间单位。")]),t._v(" "),e("p",[t._v("变量 "),e("code",[t._v("now")]),t._v(" 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）， "),e("code",[t._v("now")]),t._v(" 返回类型是 "),e("code",[t._v("uint256")]),t._v(" 。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意：Unix时间传统用一个32位的整数进行存储。这会导致“2038年”问题，当这个32位的unix时间戳不够用，产生溢出，使用这个时间的遗留系统就麻烦了。所以，如果我们想让我们的 DApp 跑够20年，我们可以使用64位整数表示时间，但为此我们的用户又得支付更多的 gas。真是个两难的设计啊！")])]),t._v(" "),e("p",[t._v("Solidity 还包含"),e("code",[t._v("秒(seconds)")]),t._v("，"),e("code",[t._v("分钟(minutes)")]),t._v("，"),e("code",[t._v("小时(hours)")]),t._v("，"),e("code",[t._v("天(days)")]),t._v("，"),e("code",[t._v("周(weeks)")]),t._v(" 和 "),e("code",[t._v("年(years)")]),t._v(" 等时间单位。它们都会转换成对应的秒数放入 "),e("code",[t._v("uint")]),t._v(" 中。所以 "),e("code",[t._v("1分钟")]),t._v(" 就是 "),e("code",[t._v("60")]),t._v("，"),e("code",[t._v("1小时")]),t._v("是 "),e("code",[t._v("3600")]),t._v("（60秒×60分钟），"),e("code",[t._v("1天")]),t._v("是"),e("code",[t._v("86400")]),t._v("（24小时×60分钟×60秒），以此类推。")]),t._v(" "),e("p",[t._v("下面是一些使用时间单位的实用案例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uint lastUpdated;\n\n// 将‘上次更新时间’ 设置为 ‘现在’\nfunction updateTimestamp() public {\n  lastUpdated = now;\n}\n\n// 如果到上次`updateTimestamp` 超过5分钟，返回 'true'\n// 不到5分钟返回 'false'\nfunction fiveMinutesHavePassed() public view returns (bool) {\n  return (now >= (lastUpdated + 5 minutes));\n}\n")])])]),e("p",[t._v("有了这些工具，我们可以为僵尸设定“冷静时间”功能。")]),t._v(" "),e("h2",{attrs:{id:"将结构体作为参数传入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将结构体作为参数传入"}},[t._v("#")]),t._v(" 将结构体作为参数传入")]),t._v(" "),e("p",[t._v("由于结构体的存储指针可以以参数的方式传递给一个 "),e("code",[t._v("private")]),t._v(" 或 "),e("code",[t._v("internal")]),t._v(" 的函数，因此结构体可以在多个函数之间相互传递。")]),t._v(" "),e("p",[t._v("遵循这样的语法：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function _doStuff(Zombie storage _zombie) internal {\n  // do stuff with _zombie\n}\n")])])]),e("p",[t._v("这样我们可以将某僵尸的引用直接传递给一个函数，而不用是通过参数传入僵尸ID后，函数再依据ID去查找。")]),t._v(" "),e("h2",{attrs:{id:"第7章-公有函数和安全性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第7章-公有函数和安全性"}},[t._v("#")]),t._v(" 第7章: 公有函数和安全性")]),t._v(" "),e("p",[t._v("现在来修改 "),e("code",[t._v("feedAndMultiply")]),t._v(" ，实现冷却周期。")]),t._v(" "),e("p",[t._v("回顾一下这个函数，前一课上我们将其可见性设置为"),e("code",[t._v("public")]),t._v("。你必须仔细地检查所有声明为 "),e("code",[t._v("public")]),t._v(" 和 "),e("code",[t._v("external")]),t._v("的函数，一个个排除用户滥用它们的可能，谨防安全漏洞。请记住，如果这些函数没有类似 "),e("code",[t._v("onlyOwner")]),t._v(" 这样的函数修饰符，用户能利用各种可能的参数去调用它们。")]),t._v(" "),e("p",[t._v("检查完这个函数，用户就可以直接调用这个它，并传入他们所希望的 "),e("code",[t._v("_targetDna")]),t._v(" 或 "),e("code",[t._v("species")]),t._v(" 。打个游戏还得遵循这么多的规则，还能不能愉快地玩耍啊！")]),t._v(" "),e("p",[t._v("仔细观察，这个函数只需被 "),e("code",[t._v("feedOnKitty()")]),t._v(" 调用，因此，想要防止漏洞，最简单的方法就是设其可见性为 "),e("code",[t._v("internal")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"带参数的函数修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#带参数的函数修饰符"}},[t._v("#")]),t._v(" 带参数的函数修饰符")]),t._v(" "),e("p",[t._v("之前我们已经读过一个简单的函数修饰符了："),e("code",[t._v("onlyOwner")]),t._v("。函数修饰符也可以带参数。例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 存储用户年龄的映射\nmapping (uint => uint) public age;\n\n// 限定用户年龄的修饰符\nmodifier olderThan(uint _age, uint _userId) {\n  require(age[_userId] >= _age);\n  _;\n}\n\n// 必须年满16周岁才允许开车 (至少在美国是这样的).\n// 我们可以用如下参数调用`olderThan` 修饰符:\nfunction driveCar(uint _userId) public olderThan(16, _userId) {\n  // 其余的程序逻辑\n}\n")])])]),e("p",[t._v("看到了吧， "),e("code",[t._v("olderThan")]),t._v(" 修饰符可以像函数一样接收参数，是“宿主”函数 "),e("code",[t._v("driveCar")]),t._v(" 把参数传递给它的修饰符的。")]),t._v(" "),e("p",[t._v("来，我们自己生产一个修饰符，通过传入的"),e("code",[t._v("level")]),t._v("参数来限制僵尸使用某些特殊功能。")]),t._v(" "),e("h3",{attrs:{id:"view-函数不花-gas"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#view-函数不花-gas"}},[t._v("#")]),t._v(" “view” 函数不花 “gas”")]),t._v(" "),e("p",[t._v("当玩家从外部调用一个"),e("code",[t._v("view")]),t._v("函数，是不需要支付一分 gas 的。")]),t._v(" "),e("p",[t._v("这是因为 "),e("code",[t._v("view")]),t._v(" 函数不会真正改变区块链上的任何数据 - 它们只是读取。因此用 "),e("code",[t._v("view")]),t._v(" 标记一个函数，意味着告诉 "),e("code",[t._v("web3.js")]),t._v("，运行这个函数只需要查询你的本地以太坊节点，而不需要在区块链上创建一个事务（事务需要运行在每个节点上，因此花费 gas）。")]),t._v(" "),e("p",[t._v("稍后我们将介绍如何在自己的节点上设置 web3.js。但现在，你关键是要记住，在所能只读的函数上标记上表示“只读”的“"),e("code",[t._v("external view")]),t._v(" 声明，就能为你的玩家减少在 DApp 中 gas 用量。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意：如果一个 "),e("code",[t._v("view")]),t._v(" 函数在另一个函数的内部被调用，而调用函数与 "),e("code",[t._v("view")]),t._v(" 函数的不属于同一个合约，也会产生调用成本。这是因为如果主调函数在以太坊创建了一个事务，它仍然需要逐个节点去验证。所以标记为 "),e("code",[t._v("view")]),t._v(" 的函数只有在外部调用时才是免费的。")])]),t._v(" "),e("h2",{attrs:{id:"第11章-存储非常昂贵"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第11章-存储非常昂贵"}},[t._v("#")]),t._v(" 第11章: 存储非常昂贵")]),t._v(" "),e("p",[t._v("Solidity 使用"),e("code",[t._v("storage")]),t._v("(存储)是相当昂贵的，”写入“操作尤其贵。")]),t._v(" "),e("p",[t._v("这是因为，无论是写入还是更改一段数据， 这都将永久性地写入区块链。”永久性“啊！需要在全球数千个节点的硬盘上存入这些数据，随着区块链的增长，拷贝份数更多，存储量也就越大。这是需要成本的！")]),t._v(" "),e("p",[t._v("为了降低成本，不到万不得已，避免将数据写入存储。这也会导致效率低下的编程逻辑 - 比如每次调用一个函数，都需要在 "),e("code",[t._v("memory")]),t._v("(内存) 中重建一个数组，而不是简单地将上次计算的数组给存储下来以便快速查找。")]),t._v(" "),e("p",[t._v("在大多数编程语言中，遍历大数据集合都是昂贵的。但是在 Solidity 中，使用一个标记了"),e("code",[t._v("external view")]),t._v("的函数，遍历比 "),e("code",[t._v("storage")]),t._v(" 要便宜太多，因为 "),e("code",[t._v("view")]),t._v(" 函数不会产生任何花销。 （gas可是真金白银啊！）。")]),t._v(" "),e("p",[t._v("我们将在下一章讨论"),e("code",[t._v("for")]),t._v("循环，现在我们来看一下看如何如何在内存中声明数组。")]),t._v(" "),e("h3",{attrs:{id:"在内存中声明数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在内存中声明数组"}},[t._v("#")]),t._v(" 在内存中声明数组")]),t._v(" "),e("p",[t._v("在数组后面加上 "),e("code",[t._v("memory")]),t._v("关键字， 表明这个数组是仅仅在内存中创建，不需要写入外部存储，并且在函数调用结束时它就解散了。与在程序结束时把数据保存进 "),e("code",[t._v("storage")]),t._v(" 的做法相比，内存运算可以大大节省gas开销 -- 把这数组放在"),e("code",[t._v("view")]),t._v("里用，完全不用花钱。")]),t._v(" "),e("p",[t._v("以下是申明一个内存数组的例子：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function getArray() external pure returns(uint[]) {\n  // 初始化一个长度为3的内存数组\n  uint[] memory values = new uint[](3);\n  // 赋值\n  values.push(1);\n  values.push(2);\n  values.push(3);\n  // 返回数组\n  return values;\n}\n")])])]),e("p",[t._v("这个小例子展示了一些语法规则，下一章中，我们将通过一个实际用例，展示它和 "),e("code",[t._v("for")]),t._v(" 循环结合的做法。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意：内存数组 "),e("strong",[t._v("必须")]),t._v(" 用长度参数（在本例中为"),e("code",[t._v("3")]),t._v("）创建。目前不支持 "),e("code",[t._v("array.push()")]),t._v("之类的方法调整数组大小，在未来的版本可能会支持长度修改。")])]),t._v(" "),e("h2",{attrs:{id:"第12章-for-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第12章-for-循环"}},[t._v("#")]),t._v(" 第12章: For 循环")]),t._v(" "),e("p",[t._v("在之前的章节中，我们提到过，函数中使用的数组是运行时在内存中通过 "),e("code",[t._v("for")]),t._v(" 循环实时构建，而不是预先建立在存储中的。")]),t._v(" "),e("p",[t._v("为什么要这样做呢？")]),t._v(" "),e("p",[t._v("为了实现 "),e("code",[t._v("getZombiesByOwner")]),t._v(" 函数，一种“无脑式”的解决方案是在 "),e("code",[t._v("ZombieFactory")]),t._v(" 中存入”主人“和”僵尸军团“的映射。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("mapping (address => uint[]) public ownerToZombies\n")])])]),e("p",[t._v("然后我们每次创建新僵尸时，执行 "),e("code",[t._v("ownerToZombies [owner] .push（zombieId）")]),t._v(" 将其添加到主人的僵尸数组中。而 "),e("code",[t._v("getZombiesByOwner")]),t._v(" 函数也非常简单：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function getZombiesByOwner(address _owner) external view returns (uint[]) {\n  return ownerToZombies[_owner];\n}\n")])])]),e("h3",{attrs:{id:"这个做法有问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这个做法有问题"}},[t._v("#")]),t._v(" 这个做法有问题")]),t._v(" "),e("p",[t._v("做法倒是简单。可是如果我们需要一个函数来把一头僵尸转移到另一个主人名下（我们一定会在后面的课程中实现的），又会发生什么？")]),t._v(" "),e("p",[t._v("这个“换主”函数要做到：")]),t._v(" "),e("p",[t._v("1.将僵尸push到新主人的 "),e("code",[t._v("ownerToZombies")]),t._v(" 数组中， 2.从旧主的 "),e("code",[t._v("ownerToZombies")]),t._v(" 数组中移除僵尸， 3.将旧主僵尸数组中“换主僵尸”之后的的每头僵尸都往前挪一位，把挪走“换主僵尸”后留下的“空槽”填上， 4.将数组长度减1。")]),t._v(" "),e("p",[t._v("但是第三步实在是太贵了！因为每挪动一头僵尸，我们都要执行一次写操作。如果一个主人有20头僵尸，而第一头被挪走了，那为了保持数组的顺序，我们得做19个写操作。")]),t._v(" "),e("p",[t._v("由于写入存储是 Solidity 中最费 gas 的操作之一，使得换主函数的每次调用都非常昂贵。更糟糕的是，每次调用的时候花费的 gas 都不同！具体还取决于用户在原主军团中的僵尸头数，以及移走的僵尸所在的位置。以至于用户都不知道应该支付多少 gas。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意：当然，我们也可以把数组中最后一个僵尸往前挪来填补空槽，并将数组长度减少一。但这样每做一笔交易，都会改变僵尸军团的秩序。")])]),t._v(" "),e("p",[t._v("由于从外部调用一个 "),e("code",[t._v("view")]),t._v(" 函数是免费的，我们也可以在 "),e("code",[t._v("getZombiesByOwner")]),t._v(" 函数中用一个for循环遍历整个僵尸数组，把属于某个主人的僵尸挑出来构建出僵尸数组。那么我们的 "),e("code",[t._v("transfer")]),t._v(" 函数将会便宜得多，因为我们不需要挪动存储里的僵尸数组重新排序，总体上这个方法会更便宜，虽然有点反直觉。")]),t._v(" "),e("h3",{attrs:{id:"使用-for-循环"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-for-循环"}},[t._v("#")]),t._v(" 使用 "),e("code",[t._v("for")]),t._v(" 循环")]),t._v(" "),e("p",[e("code",[t._v("for")]),t._v("循环的语法在 Solidity 和 JavaScript 中类似。")]),t._v(" "),e("p",[t._v("来看一个创建偶数数组的例子：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function getEvens() pure external returns(uint[]) {\n  uint[] memory evens = new uint[](5);\n  // 在新数组中记录序列号\n  uint counter = 0;\n  // 在循环从1迭代到10：\n  for (uint i = 1; i <= 10; i++) {\n    // 如果 `i` 是偶数...\n    if (i % 2 == 0) {\n      // 把它加入偶数数组\n      evens[counter] = i;\n      //索引加一， 指向下一个空的‘even’\n      counter++;\n    }\n  }\n  return evens;\n}\n")])])]),e("p",[t._v("这个函数将返回一个形为 "),e("code",[t._v("[2,4,6,8,10]")]),t._v(" 的数组。")]),t._v(" "),e("h2",{attrs:{id:"第1章-可支付"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第1章-可支付"}},[t._v("#")]),t._v(" 第1章: 可支付")]),t._v(" "),e("p",[t._v("截至目前，我们只接触到很少的 "),e("strong",[e("em",[t._v("函数修饰符")])]),t._v("。 要记住所有的东西很难，所以我们来个概览：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("我们有决定函数何时和被谁调用的可见性修饰符: "),e("code",[t._v("private")]),t._v(" 意味着它只能被合约内部调用； "),e("code",[t._v("internal")]),t._v(" 就像 "),e("code",[t._v("private")]),t._v(" 但是也能被继承的合约调用； "),e("code",[t._v("external")]),t._v(" 只能从合约外部调用；最后 "),e("code",[t._v("public")]),t._v(" 可以在任何地方调用，不管是内部还是外部。")])]),t._v(" "),e("li",[e("p",[t._v("我们也有状态修饰符， 告诉我们函数如何和区块链交互: "),e("code",[t._v("view")]),t._v(" 告诉我们运行这个函数不会更改和保存任何数据； "),e("code",[t._v("pure")]),t._v(" 告诉我们这个函数不但不会往区块链写数据，它甚至不从区块链读取数据。这两种在被从合约外部调用的时候都不花费任何gas（但是它们在被内部其他函数调用的时候将会耗费gas）。")])]),t._v(" "),e("li",[e("p",[t._v("然后我们有了自定义的 "),e("code",[t._v("modifiers")]),t._v("，例如在第三课学习的: "),e("code",[t._v("onlyOwner")]),t._v(" 和 "),e("code",[t._v("aboveLevel")]),t._v("。 对于这些修饰符我们可以自定义其对函数的约束逻辑。")])])]),t._v(" "),e("p",[t._v("这些修饰符可以同时作用于一个函数定义上：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function test() external view onlyOwner anotherModifier { /* ... */ }\n")])])]),e("p",[t._v("在这一章，我们来学习一个新的修饰符 "),e("code",[t._v("payable")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"payable-修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#payable-修饰符"}},[t._v("#")]),t._v(" "),e("code",[t._v("payable")]),t._v(" 修饰符")]),t._v(" "),e("p",[e("code",[t._v("payable")]),t._v(" 方法是让 Solidity 和以太坊变得如此酷的一部分 —— 它们是一种可以接收以太的特殊函数。")]),t._v(" "),e("p",[t._v("先放一下。当你在调用一个普通网站服务器上的API函数的时候，你无法用你的函数传送美元——你也不能传送比特币。")]),t._v(" "),e("p",[t._v("但是在以太坊中， 因为钱 ("),e("em",[t._v("以太")]),t._v("), 数据 ("),e("em",[t._v("事务负载")]),t._v(")， 以及合约代码本身都存在于以太坊。你可以在同时调用函数 "),e("strong",[t._v("并")]),t._v("付钱给另外一个合约。")]),t._v(" "),e("p",[t._v("这就允许出现很多有趣的逻辑， 比如向一个合约要求支付一定的钱来运行一个函数。")]),t._v(" "),e("h3",{attrs:{id:"例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("contract OnlineStore {\n  function buySomething() external payable {\n    // 检查以确定0.001以太发送出去来运行函数:\n    require(msg.value == 0.001 ether);\n    // 如果为真，一些用来向函数调用者发送数字内容的逻辑\n    transferThing(msg.sender);\n  }\n}\n")])])]),e("p",[t._v("在这里，"),e("code",[t._v("msg.value")]),t._v(" 是一种可以查看向合约发送了多少以太的方法，另外 "),e("code",[t._v("ether")]),t._v(" 是一个內建单元。")]),t._v(" "),e("p",[t._v("这里发生的事是，一些人会从 web3.js 调用这个函数 (从DApp的前端)， 像这样 :")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 假设 `OnlineStore` 在以太坊上指向你的合约:\nOnlineStore.buySomething().send(from: web3.eth.defaultAccount, value: web3.utils.toWei(0.001))\n")])])]),e("p",[t._v("注意这个 "),e("code",[t._v("value")]),t._v(" 字段， JavaScript 调用来指定发送多少(0.001)"),e("code",[t._v("以太")]),t._v("。如果把事务想象成一个信封，你发送到函数的参数就是信的内容。 添加一个 "),e("code",[t._v("value")]),t._v(" 很像在信封里面放钱 —— 信件内容和钱同时发送给了接收者。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意： 如果一个函数没标记为"),e("code",[t._v("payable")]),t._v("， 而你尝试利用上面的方法发送以太，函数将拒绝你的事务。")])]),t._v(" "),e("h2",{attrs:{id:"第2章-提现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第2章-提现"}},[t._v("#")]),t._v(" 第2章: 提现")]),t._v(" "),e("p",[t._v("在上一章，我们学习了如何向合约发送以太，那么在发送之后会发生什么呢？")]),t._v(" "),e("p",[t._v("在你发送以太之后，它将被存储进以合约的以太坊账户中， 并冻结在哪里 —— 除非你添加一个函数来从合约中把以太提现。")]),t._v(" "),e("p",[t._v("你可以写一个函数来从合约中提现以太，类似这样：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("contract GetPaid is Ownable {\n  function withdraw() external onlyOwner {\n    owner.transfer(this.balance);\n  }\n}\n")])])]),e("p",[t._v("注意我们使用 "),e("code",[t._v("Ownable")]),t._v(" 合约中的 "),e("code",[t._v("owner")]),t._v(" 和 "),e("code",[t._v("onlyOwner")]),t._v("，假定它已经被引入了。")]),t._v(" "),e("p",[t._v("你可以通过 "),e("code",[t._v("transfer")]),t._v(" 函数向一个地址发送以太， 然后 "),e("code",[t._v("this.balance")]),t._v(" 将返回当前合约存储了多少以太。 所以如果100个用户每人向我们支付1以太， "),e("code",[t._v("this.balance")]),t._v(" 将是100以太。")]),t._v(" "),e("p",[t._v("你可以通过 "),e("code",[t._v("transfer")]),t._v(" 向任何以太坊地址付钱。 比如，你可以有一个函数在 "),e("code",[t._v("msg.sender")]),t._v(" 超额付款的时候给他们退钱：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("uint itemFee = 0.001 ether;\nmsg.sender.transfer(msg.value - itemFee);\n")])])]),e("p",[t._v("或者在一个有卖家和卖家的合约中， 你可以把卖家的地址存储起来， 当有人买了它的东西的时候，把买家支付的钱发送给它 "),e("code",[t._v("seller.transfer(msg.value)")]),t._v("。")]),t._v(" "),e("p",[t._v("有很多例子来展示什么让以太坊编程如此之酷 —— 你可以拥有一个不被任何人控制的去中心化市场。")]),t._v(" "),e("h2",{attrs:{id:"用-keccak256-来制造随机数。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用-keccak256-来制造随机数。"}},[t._v("#")]),t._v(" 用 "),e("code",[t._v("keccak256")]),t._v(" 来制造随机数。")]),t._v(" "),e("p",[t._v("Solidity 中最好的随机数生成器是 "),e("code",[t._v("keccak256")]),t._v(" 哈希函数.")]),t._v(" "),e("p",[t._v("我们可以这样来生成一些随机数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 生成一个0到100的随机数:\nuint randNonce = 0;\nuint random = uint(keccak256(now, msg.sender, randNonce)) % 100;\nrandNonce++;\nuint random2 = uint(keccak256(now, msg.sender, randNonce)) % 100;\n")])])]),e("p",[t._v("这个方法首先拿到 "),e("code",[t._v("now")]),t._v(" 的时间戳、 "),e("code",[t._v("msg.sender")]),t._v("、 以及一个自增数 "),e("code",[t._v("nonce")]),t._v(" （一个仅会被使用一次的数，这样我们就不会对相同的输入值调用一次以上哈希函数了）。")]),t._v(" "),e("p",[t._v("然后利用 "),e("code",[t._v("keccak")]),t._v(" 把输入的值转变为一个哈希值, 再将哈希值转换为 "),e("code",[t._v("uint")]),t._v(", 然后利用 "),e("code",[t._v("% 100")]),t._v(" 来取最后两位, 就生成了一个0到100之间随机数了。")]),t._v(" "),e("h3",{attrs:{id:"这个方法很容易被不诚实的节点攻击"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这个方法很容易被不诚实的节点攻击"}},[t._v("#")]),t._v(" 这个方法很容易被不诚实的节点攻击")]),t._v(" "),e("p",[t._v("在以太坊上, 当你在和一个合约上调用函数的时候, 你会把它广播给一个节点或者在网络上的 "),e("strong",[e("em",[t._v("transaction")])]),t._v(" 节点们。 网络上的节点将收集很多事务, 试着成为第一个解决计算密集型数学问题的人，作为“工作证明”，然后将“工作证明”(Proof of Work, PoW)和事务一起作为一个 "),e("strong",[e("em",[t._v("block")])]),t._v(" 发布在网络上。")]),t._v(" "),e("p",[t._v("一旦一个节点解决了一个PoW, 其他节点就会停止尝试解决这个 PoW, 并验证其他节点的事务列表是有效的，然后接受这个节点转而尝试解决下一个节点。")]),t._v(" "),e("p",[e("strong",[t._v("这就让我们的随机数函数变得可利用了")])]),t._v(" "),e("p",[t._v("我们假设我们有一个硬币翻转合约——正面你赢双倍钱，反面你输掉所有的钱。假如它使用上面的方法来决定是正面还是反面 ("),e("code",[t._v("random >= 50")]),t._v(" 算正面, "),e("code",[t._v("random < 50")]),t._v(" 算反面)。")]),t._v(" "),e("p",[t._v("如果我正运行一个节点，我可以 "),e("strong",[t._v("只对我自己的节点")]),t._v(" 发布一个事务，且不分享它。 我可以运行硬币翻转方法来偷窥我的输赢 — 如果我输了，我就不把这个事务包含进我要解决的下一个区块中去。我可以一直运行这个方法，直到我赢得了硬币翻转并解决了下一个区块，然后获利。")]),t._v(" "),e("h3",{attrs:{id:"如何在以太坊上安全地生成随机数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何在以太坊上安全地生成随机数"}},[t._v("#")]),t._v(" 如何在以太坊上安全地生成随机数")]),t._v(" "),e("p",[t._v("因为区块链的全部内容对所有参与者来说是透明的， 这就让这个问题变得很难，它的解决方法不在本课程讨论范围，你可以阅读 "),e("a",{attrs:{href:"https://ethereum.stackexchange.com/questions/191/how-can-i-securely-generate-a-random-number-in-my-smart-contract",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个 StackOverflow 上的讨论"),e("OutboundLink")],1),t._v(" 来获得一些主意。 一个方法是利用 "),e("strong",[e("em",[t._v("oracle")])]),t._v(" 来访问以太坊区块链之外的随机数函数。")]),t._v(" "),e("p",[t._v("当然， 因为网络上成千上万的以太坊节点都在竞争解决下一个区块，我能成功解决下一个区块的几率非常之低。 这将花费我们巨大的计算资源来开发这个获利方法 — 但是如果奖励异常地高(比如我可以在硬币翻转函数中赢得 1个亿)， 那就很值得去攻击了。")]),t._v(" "),e("p",[t._v("所以尽管这个方法在以太坊上不安全，在实际中，除非我们的随机函数有一大笔钱在上面，你游戏的用户一般是没有足够的资源去攻击的。")]),t._v(" "),e("p",[t._v("因为在这个教程中，我们只是在编写一个简单的游戏来做演示，也没有真正的钱在里面，所以我们决定接受这个不足之处，使用这个简单的随机数生成函数。但是要谨记它是不安全的。")]),t._v(" "),e("h1",{attrs:{id:"第1章-以太坊上的代币"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第1章-以太坊上的代币"}},[t._v("#")]),t._v(" 第1章: 以太坊上的代币")]),t._v(" "),e("p",[t._v("让我们来聊聊 "),e("strong",[t._v("代币")])]),t._v(" "),e("p",[t._v("如果你对以太坊的世界有一些了解，你很可能听过人们聊到代币——尤其是 "),e("strong",[e("em",[t._v("ERC20 代币")])]),t._v(".")]),t._v(" "),e("p",[t._v("一个 "),e("strong",[t._v("代币")]),t._v(" 在以太坊基本上就是一个遵循一些共同规则的智能合约——即它实现了所有其他代币合约共享的一组标准函数，例如 "),e("code",[t._v("transfer(address _to, uint256 _value)")]),t._v(" 和 "),e("code",[t._v("balanceOf(address _owner)")]),t._v(".")]),t._v(" "),e("p",[t._v("在智能合约内部，通常有一个映射， "),e("code",[t._v("mapping(address => uint256) balances")]),t._v("，用于追踪每个地址还有多少余额。")]),t._v(" "),e("p",[t._v("所以基本上一个代币只是一个追踪谁拥有多少该代币的合约，和一些可以让那些用户将他们的代币转移到其他地址的函数。")]),t._v(" "),e("h3",{attrs:{id:"它为什么重要呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#它为什么重要呢"}},[t._v("#")]),t._v(" 它为什么重要呢？")]),t._v(" "),e("p",[t._v("由于所有 ERC20 代币共享具有相同名称的同一组函数，它们都可以以相同的方式进行交互。")]),t._v(" "),e("p",[t._v("这意味着如果你构建的应用程序能够与一个 ERC20 代币进行交互，那么它就也能够与任何 ERC20 代币进行交互。 这样一来，将来你就可以轻松地将更多的代币添加到你的应用中，而无需进行自定义编码。 你可以简单地插入新的代币合约地址，然后哗啦，你的应用程序有另一个它可以使用的代币了。")]),t._v(" "),e("p",[t._v("其中一个例子就是交易所。 当交易所添加一个新的 ERC20 代币时，实际上它只需要添加与之对话的另一个智能合约。 用户可以让那个合约将代币发送到交易所的钱包地址，然后交易所可以让合约在用户要求取款时将代币发送回给他们。")]),t._v(" "),e("p",[t._v("交易所只需要实现这种转移逻辑一次，然后当它想要添加一个新的 ERC20 代币时，只需将新的合约地址添加到它的数据库即可。")]),t._v(" "),e("h3",{attrs:{id:"其他代币标准"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他代币标准"}},[t._v("#")]),t._v(" 其他代币标准")]),t._v(" "),e("p",[t._v("对于像货币一样的代币来说，ERC20 代币非常酷。 但是要在我们僵尸游戏中代表僵尸就并不是特别有用。")]),t._v(" "),e("p",[t._v("首先，僵尸不像货币可以分割 —— 我可以发给你 0.237 以太，但是转移给你 0.237 的僵尸听起来就有些搞笑。")]),t._v(" "),e("p",[t._v('其次，并不是所有僵尸都是平等的。 你的2级僵尸"'),e("strong",[t._v("Steve")]),t._v('"完全不能等同于我732级的僵尸"'),e("strong",[t._v("H4XF13LD MORRIS 💯💯😎💯💯")]),t._v('"。（你差得远呢，'),e("em",[t._v("Steve")]),t._v("）。")]),t._v(" "),e("p",[t._v("有另一个代币标准更适合如 CryptoZombies 这样的加密收藏品——它们被称为**"),e("em",[t._v("ERC721 代币.")]),t._v("**")]),t._v(" "),e("p",[e("strong",[t._v("ERC721 代币")]),t._v("是"),e("strong",[t._v("不能互换")]),t._v("的，因为每个代币都被认为是唯一且不可分割的。 你只能以整个单位交易它们，并且每个单位都有唯一的 ID。")]),t._v(" "),e("blockquote",[e("p",[t._v("请注意，使用像 ERC721 这样的标准的优势就是，我们不必在我们的合约中实现拍卖或托管逻辑，这决定了玩家能够如何交易／出售我们的僵尸。 如果我们符合规范，其他人可以为加密可交易的 ERC721 资产搭建一个交易所平台，我们的 ERC721 僵尸将可以在该平台上使用。 所以使用代币标准相较于使用你自己的交易逻辑有明显的好处。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);