(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{277:function(t,e,a){"use strict";a.r(e);var s=a(13),r=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),e("h2",{attrs:{id:"学习物料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#学习物料"}},[t._v("#")]),t._v(" 学习物料")]),t._v(" "),e("p",[t._v("学习文档参考："),e("a",{attrs:{href:"https://docker.easydoc.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("b 站 up 主-广州云科"),e("OutboundLink")],1),t._v("\n学习视频参考："),e("a",{attrs:{href:"https://www.bilibili.com/video/BV11L411g7U1",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker 1 小时快速上手教程，无废话纯干货"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"从官方镜像安装软件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从官方镜像安装软件"}},[t._v("#")]),t._v(" 从官方镜像安装软件")]),t._v(" "),e("p",[t._v("从 Docker 官方镜像仓库"),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hub.docker.com/"),e("OutboundLink")],1),t._v("安装 Redis\n"),e("code",[t._v("docker run -d -p 6379:6379 --name redis redis:latest")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),e("p",[e("code",[t._v("docker run")]),t._v(" - 表示 Docker 运行一个软件")]),t._v(" "),e("p",[e("code",[t._v("-d")])]),t._v(" "),e("ul",[e("li",[t._v("表示在后台运行")])]),t._v(" "),e("p",[e("code",[t._v("-p")])]),t._v(" "),e("ul",[e("li",[t._v("端口映射：表示端口的暴露（把docker文件里的端口【容器的端口】6379暴露到宿主机6379）")])]),t._v(" "),e("p",[e("code",[t._v("--name redis")])]),t._v(" "),e("ul",[e("li",[t._v("给容器命名为 redis")])]),t._v(" "),e("p",[e("code",[t._v("redis：latest")])]),t._v(" "),e("ul",[e("li",[t._v("使用的是Redis的最新版本")])])]),t._v(" "),e("h2",{attrs:{id:"自己-build-镜像和运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自己-build-镜像和运行"}},[t._v("#")]),t._v(" 自己 Build 镜像和运行")]),t._v(" "),e("h3",{attrs:{id:"images-镜像打包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#images-镜像打包"}},[t._v("#")]),t._v(" images 镜像打包")]),t._v(" "),e("p",[e("code",[t._v("docker build -t test:v1 .")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),e("p",[e("code",[t._v("docker build")]),t._v(" - 表示 Docker 根据当前目录下的 Dockerfile 文件打包")]),t._v(" "),e("p",[e("code",[t._v("-t test：v1")])]),t._v(" "),e("ul",[e("li",[t._v("设置镜像名字为 "),e("code",[t._v("test")]),t._v(" ，设置镜像版本号为v1")])]),t._v(" "),e("p",[e("code",[t._v(".")])]),t._v(" "),e("ul",[e("li",[t._v("是 "),e("code",[t._v("./")]),t._v(" 的省略写法，表示当前目录")])])]),t._v(" "),e("h3",{attrs:{id:"运行-image-镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行-image-镜像"}},[t._v("#")]),t._v(" 运行 image 镜像")]),t._v(" "),e("p",[e("code",[t._v("docker run -p 8080:8080 --name test-hello test:v1")])]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("-p")]),t._v("  映射容器内端口到宿主机"),e("br"),t._v(" "),e("code",[t._v("--name")]),t._v("  容器名字"),e("br"),t._v(" "),e("code",[t._v("-d")]),t._v("  后台运行"),e("br"),t._v("\n命令参考文档："),e("a",{attrs:{href:"https://docs.docker.com/engine/reference/run/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.docker.com/engine/reference/run/"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"更多相关命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更多相关命令"}},[t._v("#")]),t._v(" 更多相关命令")]),t._v(" "),e("p",[e("code",[t._v("docker ps")]),t._v("  查看当前运行中的容器")]),t._v(" "),e("p",[e("code",[t._v("docker images")]),t._v("  查看镜像列表")]),t._v(" "),e("p",[e("code",[t._v("docker rm container-id")]),t._v("  删除指定 id 的容器")]),t._v(" "),e("p",[e("code",[t._v("docker stop/start container-id")]),t._v("  停止/启动指定 id 的容器")]),t._v(" "),e("p",[e("code",[t._v("docker rmi image-id")]),t._v("  删除指定 id 的镜像")]),t._v(" "),e("p",[e("code",[t._v("docker volume ls")]),t._v("  查看 volume 列表")]),t._v(" "),e("p",[e("code",[t._v("docker network ls")]),t._v("  查看网络列表")]),t._v(" "),e("h2",{attrs:{id:"dockerfile-的编写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-的编写"}},[t._v("#")]),t._v(" Dockerfile 的编写")]),t._v(" "),e("p",[t._v("示例")]),t._v(" "),e("div",{staticClass:"language-dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于node11")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node:11")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 该指令设置生成的镜像的作者字段，可以换成更便捷的`LABEL`指令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MAINTAINER")]),t._v(" easydoc.net")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 复制代码，把当前文件目录下的所有文件复制到/app里")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" . /app")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置容器启动后的默认运行目录（设置工作目录）")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行命令，安装依赖")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# RUN 命令可以有多个，但是可以用 && 连接多个命令来减少层级。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如 RUN npm install && cd /app && mkdir logs")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install --registry=https://registry.npm.taobao.org")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# CMD 指令只能一个，是容器启动后执行的命令，算是程序的入口。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果还需要运行其他命令可以用 && 连接，也可以写成一个shell脚本去执行。")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如 CMD cd /app && ./start.sh")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" node app.js")]),t._v("\n\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),e("ul",[e("li",[t._v("指令是不区分大小写的，不过习惯上他们是大写，以便于区分指令和参数")]),t._v(" "),e("li",[t._v("Docker 按顺序运行 Dockerfile 中的指令")]),t._v(" "),e("li",[t._v("一个 Dockerfile 必须以 FROM 指令开始，这可能是在解析器指令、注释和全局范围的 ARG 之后")]),t._v(" "),e("li",[t._v("FROM 指令指定了你要构建的父镜像 - FROM 前面只能有一个或多个 ARG 指令，这些指令声明了 Dockerfile 中 FROM 行使用的参数。")]),t._v(" "),e("li",[t._v("Docker 将以#开头的行视为注释，除非该行是一个有效的分析器指令。一行中其他地方的#标记被视为参数。")]),t._v(" "),e("li",[t._v("这允许像这样的语句 "),e("code",[t._v("RUN echo 'we are running some # of cool things'")])])])]),t._v(" "),e("h3",{attrs:{id:"实用小技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实用小技巧"}},[t._v("#")]),t._v(" 实用小技巧")]),t._v(" "),e("p",[t._v("如果你写 Dockerfile 时经常遇到一些运行错误，依赖错误等，你可以直接运行一个"),e("strong",[t._v("依赖的底")]),t._v("，然后进入终端进行配置环境，\n成功后再把做过的步骤命令写道 Dockerfile 文件中，这样编写调试会快很多。")]),t._v(" "),e("p",[t._v("例如上面的底是"),e("code",[t._v("node:11")]),t._v("，\n我们可以运行"),e("code",[t._v("docker run -it -d node:11 bash")]),t._v("，\n跑起来后进入容器终端配置依赖的软件，然后尝试跑起来自己的软件，\n最后把所有做过的步骤写入到 Dockerfile 就好了。")]),t._v(" "),e("p",[t._v("掌握好这个技巧，你的 Dockerfile 文件编写起来就非常的得心应手了。")]),t._v(" "),e("h2",{attrs:{id:"目录挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录挂载"}},[t._v("#")]),t._v(" 目录挂载")]),t._v(" "),e("h4",{attrs:{id:"现存问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#现存问题"}},[t._v("#")]),t._v(" 现存问题")]),t._v(" "),e("ul",[e("li",[t._v("使用 Docker 运行后，我们改了项目代码不会立刻生效，需要重新"),e("code",[t._v("build")]),t._v("和"),e("code",[t._v("run")]),t._v("，很是麻烦。")]),t._v(" "),e("li",[t._v("容器里面产生的数据，例如 log 文件，数据库备份文件，容器删除后就丢失了。")])]),t._v(" "),e("blockquote",[e("p",[t._v("使用目录挂载解决以上问题")])]),t._v(" "),e("h3",{attrs:{id:"几种挂载方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#几种挂载方式"}},[t._v("#")]),t._v(" 几种挂载方式")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("bind mount")]),t._v("  直接把宿主机目录映射到容器内，适合挂代码目录和配置文件。可挂到多个容器上")]),t._v(" "),e("li",[e("code",[t._v("volume")]),t._v("  由容器创建和管理，创建在宿主机，所以删除容器不会丢失，官方推荐，更高效，Linux 文件系统，适合存储数据库数据。可挂到多个容器上")]),t._v(" "),e("li",[e("code",[t._v("tmpfs mount")]),t._v("  适合存储临时文件，存宿主机内存中。不可多容器共享。")])]),t._v(" "),e("p",[t._v("文档参考："),e("a",{attrs:{href:"https://docs.docker.com/storage/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.docker.com/storage/"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("img",{attrs:{src:"https://sjwx.easydoc.xyz/46901064/files/kv96dc4q.png",alt:"image.png"}})]),t._v(" "),e("h3",{attrs:{id:"挂载演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#挂载演示"}},[t._v("#")]),t._v(" 挂载演示")]),t._v(" "),e("p",[t._v("这里演示第一种和第二种挂载目录的方式")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("bind mount")]),t._v("  方式用绝对路径  "),e("code",[t._v("-v D:/code:/app")])])]),t._v(" "),e("p",[e("code",[t._v("volume")]),t._v("  方式，只需要一个名字  "),e("code",[t._v("-v db-data:/app")])]),t._v(" "),e("p",[t._v("示例："),e("br"),t._v(" "),e("code",[t._v("docker run -p 8080:8080 --name test-hello -v 绝对路径:/app -d test:v1")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),e("p",[e("code",[t._v("-v")]),t._v(" - 把项目代码挂载到容器 "),e("code",[t._v("text-hello")]),t._v(" 里的 "),e("code",[t._v("/app")]),t._v(" 目录下")])]),t._v(" "),e("h2",{attrs:{id:"多容器通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多容器通信"}},[t._v("#")]),t._v(" 多容器通信")]),t._v(" "),e("p",[t._v("项目往往都不是独立运行的，需要数据库、缓存这些东西配合运作。")]),t._v(" "),e("h3",{attrs:{id:"创建虚拟网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建虚拟网络"}},[t._v("#")]),t._v(" 创建虚拟网络")]),t._v(" "),e("p",[t._v("要想多容器之间互通，例如从一个 Web 容器访问一个 Redis 容器，我们只需要把他们放到同个网络中就可以了。")]),t._v(" "),e("p",[t._v("文档参考："),e("a",{attrs:{href:"https://docs.docker.com/engine/reference/commandline/network/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.docker.com/engine/reference/commandline/network/"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"演示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#演示"}},[t._v("#")]),t._v(" 演示")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("创建一个名为"),e("code",[t._v("test-net")]),t._v("的网络：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("docker network create test-net")])])])]),t._v(" "),e("li",[e("p",[t._v("在  "),e("code",[t._v("test-net")]),t._v("  网络中，使用最新的 redis 镜像运行名称为 redis 的容器，并指定该容器在 test-net 网络中的别名为"),e("code",[t._v("redis")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("docker run -d --name redis --network test-net --network-alias redis redis:latest")])])])]),t._v(" "),e("li",[e("p",[t._v("修改代码中访问"),e("code",[t._v("redis")]),t._v("的地址为网络别名\n"),e("img",{attrs:{src:"https://sjwx.easydoc.xyz/46901064/files/kv98rfvb.png",alt:"image.png"}})])])]),t._v(" "),e("blockquote",[e("p",[t._v("这个地方目前纯前端不太用得到，这个应该是写在后端的？这个测试项目应该是用 nodejs 写的后端")])]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[e("p",[t._v("运行 Web 项目，使用同个网络")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("docker run -p 8080:8080 --name test -v D:/test:/app --network test-net -d test:v1")])])])]),t._v(" "),e("li",[e("p",[t._v("查看数据\n"),e("code",[t._v("http://localhost:8080/redis")]),e("br"),t._v("\n容器终端查看数据是否一致")])])]),t._v(" "),e("h3",{attrs:{id:"更多相关命令-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更多相关命令-2"}},[t._v("#")]),t._v(" 更多相关命令")]),t._v(" "),e("p",[e("code",[t._v("docker ps")]),t._v("  查看当前运行中的容器")]),t._v(" "),e("ul",[e("li",[t._v("后面加一个"),e("code",[t._v("-a")]),t._v("可以查看所有容器")])]),t._v(" "),e("p",[e("code",[t._v("docker images")]),t._v("  查看镜像列表")]),t._v(" "),e("p",[e("code",[t._v("docker rm container-id")]),t._v("  删除指定 id 的容器")]),t._v(" "),e("p",[e("code",[t._v("docker stop/start container-id")]),t._v("  停止/启动指定 id 的容器")]),t._v(" "),e("p",[e("code",[t._v("docker rmi image-id")]),t._v("  删除指定 id 的镜像")]),t._v(" "),e("p",[e("code",[t._v("docker volume ls")]),t._v("  查看 volume 列表")]),t._v(" "),e("p",[e("code",[t._v("docker network ls")]),t._v("  查看网络列表")]),t._v(" "),e("h2",{attrs:{id:"docker-compose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[t._v("#")]),t._v(" Docker-Compose")]),t._v(" "),e("h3",{attrs:{id:"现存问题-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#现存问题-2"}},[t._v("#")]),t._v(" 现存问题")]),t._v(" "),e("p",[t._v("在上节，我们运行了两个容器：Web 项目 + Redis"),e("br"),t._v("\n如果项目依赖更多的第三方软件，我们需要管理的容器就更加多，每个都要单独配置运行，指定网络。"),e("br"),t._v("\n这节，我们使用 docker-compose 把项目的多个服务集合到一起，一键运行。")]),t._v(" "),e("h3",{attrs:{id:"安装-docker-compose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker-compose"}},[t._v("#")]),t._v(" 安装 Docker Compose")]),t._v(" "),e("ul",[e("li",[t._v("如果你是安装的桌面版 Docker，不需要额外安装，已经包含了。")]),t._v(" "),e("li",[t._v("如果是没图形界面的服务器版 Docker，你需要单独安装  "),e("a",{attrs:{href:"https://docs.docker.com/compose/install/#install-compose-on-linux-systems",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装文档"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("运行"),e("code",[t._v("docker-compose")]),t._v("检查是否安装成功")])]),t._v(" "),e("h3",{attrs:{id:"编写脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编写脚本"}},[t._v("#")]),t._v(" 编写脚本")]),t._v(" "),e("p",[t._v("要把项目依赖的多个服务集合到一起，我们需要编写一个"),e("code",[t._v("docker-compose.yml")]),t._v("文件，描述依赖哪些服务。")]),t._v(" "),e("p",[t._v("参考文档："),e("a",{attrs:{href:"https://docs.docker.com/compose/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.docker.com/compose/"),e("OutboundLink")],1)]),t._v(" "),e("div",{staticClass:"language-yml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 版本号")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3.7"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要依赖的服务")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# web项目")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./\n\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从容器里暴露一个端口出来")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 80"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把当前目录挂载到app目录下")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/app\n\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置时区（默认时区不是北京时间）")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" TZ=Asia/Shanghai\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# redis")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 直接使用redis镜像，就不需要build了")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("5.0.13\n\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把redis目录挂载到app目录下（？这个没看懂）")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/data\n\t\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" TZ=Asia/Shanghai\n\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("容器默认时间不是北京时间，增加 TZ=Asia/Shanghai 可以改为北京时间")])]),t._v(" "),e("h3",{attrs:{id:"运行脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行脚本"}},[t._v("#")]),t._v(" 运行脚本")]),t._v(" "),e("p",[t._v("在"),e("code",[t._v("docker-compose.yml")]),t._v("  文件所在目录，执行："),e("code",[t._v("docker-compose up")]),t._v("就可以跑起来了。"),e("br"),t._v("\n命令参考："),e("a",{attrs:{href:"https://docs.docker.com/compose/reference/up/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.docker.com/compose/reference/up/"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("在后台运行只需要加一个 -d 参数"),e("code",[t._v("docker-compose up -d")])]),t._v(" "),e("h3",{attrs:{id:"更多相关命令-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更多相关命令-3"}},[t._v("#")]),t._v(" 更多相关命令")]),t._v(" "),e("p",[t._v("查看运行状态："),e("code",[t._v("docker-compose ps")])]),t._v(" "),e("p",[t._v("停止运行："),e("code",[t._v("docker-compose stop")])]),t._v(" "),e("p",[t._v("重启："),e("code",[t._v("docker-compose restart")])]),t._v(" "),e("p",[t._v("重启单个服务："),e("code",[t._v("docker-compose restart service-name")])]),t._v(" "),e("p",[t._v("进入容器命令行："),e("code",[t._v("docker-compose exec service-name sh")])]),t._v(" "),e("p",[t._v("查看容器运行 log："),e("code",[t._v("docker-compose logs [service-name]")])]),t._v(" "),e("h2",{attrs:{id:"发布和部署镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布和部署镜像"}},[t._v("#")]),t._v(" 发布和部署镜像")]),t._v(" "),e("h3",{attrs:{id:"镜像仓库介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像仓库介绍"}},[t._v("#")]),t._v(" 镜像仓库介绍")]),t._v(" "),e("p",[t._v("镜像仓库用来存储我们 build 出来的“安装包”，Docker 官方提供了一个  "),e("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("镜像库"),e("OutboundLink")],1),t._v("，里面包含了大量镜像，基本各种软件所需依赖都有，要什么直接上去搜索。")]),t._v(" "),e("p",[t._v("我们也可以把自己 build 出来的镜像上传到 docker 提供的镜像库中，方便传播。"),e("br"),t._v("\n当然你也可以搭建自己的私有镜像库，或者使用国内各种大厂提供的镜像托管服务，例如：阿里云、腾讯云")]),t._v(" "),e("blockquote",[e("p",[t._v("这个地方我就不过多了解了，这个就是教你怎么把自己打好的镜像放到镜像仓库里并从仓库中部署，需要的话自己看"),e("a",{attrs:{href:"https://docker.easydoc.net/doc/81170005/cCewZWoN/UlEl1cy7",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"备份和迁移数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#备份和迁移数据"}},[t._v("#")]),t._v(" 备份和迁移数据")]),t._v(" "),e("h3",{attrs:{id:"迁移方式介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迁移方式介绍"}},[t._v("#")]),t._v(" 迁移方式介绍")]),t._v(" "),e("p",[t._v("容器中的数据，如果没有用挂载目录，删除容器后就会丢失数据。"),e("br"),t._v("\n前面我们已经讲解了如何  "),e("a",{attrs:{href:"doc:kze7f0ZR"}},[t._v("挂载目录")])]),t._v(" "),e("p",[t._v("如果使用"),e("code",[t._v("bind mount")]),t._v("直接把宿主机的目录挂进去容器，那迁移数据很方便，直接复制目录就好了")]),t._v(" "),e("p",[t._v("如果使用"),e("code",[t._v("volume")]),t._v("方式挂载的，由于数据是由容器创建和管理的，需要用特殊的方式把数据弄出来。")]),t._v(" "),e("h3",{attrs:{id:"备份和导入-volume-的流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#备份和导入-volume-的流程"}},[t._v("#")]),t._v(" 备份和导入 Volume 的流程")]),t._v(" "),e("p",[t._v("备份：")]),t._v(" "),e("ul",[e("li",[t._v("运行一个 ubuntu 的容器，挂载需要备份的 volume 到容器，并且挂载宿主机目录到容器里的备份目录。")]),t._v(" "),e("li",[t._v("运行 tar 命令把数据压缩为一个文件")]),t._v(" "),e("li",[t._v("把备份文件复制到需要导入的机器")])]),t._v(" "),e("p",[t._v("导入：")]),t._v(" "),e("ul",[e("li",[t._v("运行 ubuntu 容器，挂载容器的 volume，并且挂载宿主机备份文件所在目录到容器里")]),t._v(" "),e("li",[t._v("运行 tar 命令解压备份文件到指定目录")])]),t._v(" "),e("h3",{attrs:{id:"演示-备份-mongodb-数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#演示-备份-mongodb-数据"}},[t._v("#")]),t._v(" 演示：备份 MongoDB 数据")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("运行一个 mongodb，创建一个名叫"),e("code",[t._v("mongo-data")]),t._v("的 volume 指向容器的 /data 目录"),e("br"),t._v(" "),e("code",[t._v("docker run -p 27018:27017 --name mongo -v mongo-data:/data -d mongo:4.4")])])]),t._v(" "),e("li",[e("p",[t._v("运行一个 Ubuntu 的容器，挂载"),e("code",[t._v("mongo")]),t._v("容器的所有 volume，映射宿主机的 backup 目录到容器里面的 /backup 目录，然后运行 tar 命令把数据压缩打包"),e("br"),t._v(" "),e("code",[t._v("docker run --rm --volumes-from mongo -v d:/backup:/backup ubuntu tar cvf /backup/backup.tar /data/")])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),e("p",[e("code",[t._v("--rm")])]),t._v(" "),e("ul",[e("li",[t._v("表示如果存在同名容器,那么会先把这个同名容器删除")])]),t._v(" "),e("p",[e("code",[t._v("--volumes-from mongo")])]),t._v(" "),e("ul",[e("li",[t._v("表示从名为 "),e("code",[t._v("mongo")]),t._v(" 的容器里挂载volume")])]),t._v(" "),e("p",[e("code",[t._v("-v d:/backup:/backup")])]),t._v(" "),e("ul",[e("li",[t._v("表示指定一个绝对路径 "),e("code",[t._v("d:/backup")]),t._v(" ，把宿主机的此目录指向容器里的 "),e("code",[t._v("/backup")]),t._v(" 目录")])]),t._v(" "),e("p",[e("code",[t._v("ubuntu")])]),t._v(" "),e("ul",[e("li",[t._v("使用Ubuntu镜像")])]),t._v(" "),e("p",[e("code",[t._v("tar cvf /backup/backup.tar /data/")])]),t._v(" "),e("ul",[e("li",[t._v("使用 "),e("code",[t._v("tar")]),t._v(" 命令把 "),e("code",[t._v("/data/")]),t._v(" 这个目录压缩，放在 "),e("code",[t._v("/backup/backup.tar")]),t._v(" 位置并命名压缩包为 "),e("code",[t._v("backup.tar")])])])]),t._v(" "),e("p",[t._v("最后你就可以拿着这个 backup.tar 文件去其他地方导入了。")]),t._v(" "),e("h3",{attrs:{id:"演示-恢复-volume-数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#演示-恢复-volume-数据"}},[t._v("#")]),t._v(" 演示：恢复 Volume 数据")]),t._v(" "),e("ul",[e("li",[t._v("运行一个 ubuntu 容器，挂载 mongo 容器的所有 volumes，然后读取 /backup 目录中的备份文件，解压到 /data/ 目录"),e("br"),t._v(" "),e("code",[t._v('docker run --rm --volumes-from mongo -v d:/backup:/backup ubuntu bash -c "cd /data/ && tar xvf /backup/backup.tar --strip 1"')])])]),t._v(" "),e("blockquote",[e("p",[t._v("注意，volumes-from 指定的是容器名字"),e("br"),t._v("\nstrip 1 表示解压时去掉前面 1 层目录，因为压缩时包含了绝对路径")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),e("p",[e("code",[t._v("bash -c")])]),t._v(" "),e("ul",[e("li",[t._v("表示执行“”里的脚本命令")])]),t._v(" "),e("p",[e("code",[t._v("&&")])]),t._v(" "),e("ul",[e("li",[t._v("是多个命令之间的连接符")])]),t._v(" "),e("p",[e("code",[t._v("tar xvf /backup/backup.tar --strip 1")])]),t._v(" "),e("ul",[e("li",[t._v("表示解压目录在 "),e("code",[t._v("/backup/backup.tar")]),t._v(" 的文件\n"),e("ul",[e("li",[e("code",[t._v("tar xvf")]),t._v(" 可以解压缩任何格式（？）的压缩包")]),t._v(" "),e("li",[e("code",[t._v("--strip 1")]),t._v(" 表示解压的时候改变目录结构")])])])])]),t._v(" "),e("h3",{attrs:{id:"gva-后台的-dockerfile-解读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gva-后台的-dockerfile-解读"}},[t._v("#")]),t._v(" gva 后台的 Dockerfile 解读")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 阶段一：搭建构建环境")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 声明镜像来源为node:16-----------【tag1】")]),t._v("\nFROM node:16\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 声明工作目录")]),t._v("\nWORKDIR /gva_web/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拷贝整个web项目到当前工作目录")]),t._v("\nCOPY "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用yarn进行安装依赖")]),t._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" build\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果是npm就换成下面这个命令")]),t._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run build\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 阶段二：搭建最小运行环境")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 声明镜像来源为nginx:alpine, alpine 镜像小")]),t._v("\nFROM nginx:alpine\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表明镜像编写者及邮箱（不重要）")]),t._v("\nLABEL "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("MAINTAINER")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SliverHorn@sliver_horn@qq.com"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从gva自带的.docker-compose/nginx/conf.d/目录拷贝my.conf到容器内的/etc/nginx/conf.d/my.conf目录下")]),t._v("\nCOPY .docker-compose/nginx/conf.d/my.conf /etc/nginx/conf.d/my.conf\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从第一阶段进行拷贝文件")]),t._v("\nCOPY --from"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" /gva_web/dist /usr/share/nginx/html\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看/etc/nginx/nginx.conf文件-----------【tag2】")]),t._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /etc/nginx/nginx.conf\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 /etc/nginx/conf.d/my.conf-----------【tag2】")]),t._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /etc/nginx/conf.d/my.conf\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 文件是否拷贝成功-----------【tag2】")]),t._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -al /usr/share/nginx/html\n")])])]),e("h4",{attrs:{id:"tag1-from-as-构建阶段命名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag1-from-as-构建阶段命名"}},[t._v("#")]),t._v(" TAG1：FROM...AS 构建阶段命名")]),t._v(" "),e("p",[e("code",[t._v("FROM")]),t._v(" 指令后面可以增加一个 "),e("code",[t._v("AS")]),t._v(" 参数，可为该构建阶段命名，便于后续构建阶段引用")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("FROM image"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" @digest"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" AS stage-name\n")])])]),e("h4",{attrs:{id:"tag2-多行-run-命令合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag2-多行-run-命令合并"}},[t._v("#")]),t._v(" TAG2：多行 RUN 命令合并")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("RUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /etc/nginx/nginx.conf  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /etc/nginx/conf.d/my.conf  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -al /usr/share/nginx/html\n")])])]),e("h4",{attrs:{id:"tag3-copy-指令后参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag3-copy-指令后参数"}},[t._v("#")]),t._v(" TAG3："),e("code",[t._v("COPY")]),t._v(" 指令后参数")]),t._v(" "),e("p",[t._v("在后续阶段的 COPY 指令后面增加了--from 参数，指明引用前面哪一个构建阶段的成果，格式如下：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("COPY --from"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("stage-name "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),e("h3",{attrs:{id:"多阶段构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多阶段构建"}},[t._v("#")]),t._v(" 多阶段构建")]),t._v(" "),e("p",[t._v("在应用了容器技术的软件开发过程中，控制容器镜像的大小可是一件费时费力的事情。")]),t._v(" "),e("p",[t._v("如果我们构建的镜像既是编译软件的环境，又是软件最终的运行环境，这是很难控制镜像大小的。\n所以常见的配置模式为：分别为软件的编译环境和运行环境提供不同的容器镜像。")]),t._v(" "),e("p",[t._v("比如为编译环境提供一个 Dockerfile.build，用它构建的镜像包含了编译软件需要的所有内容，比如代码、SDK、工具等等。\n同时为软件的运行环境提供另外一个单独的 Dockerfile，它从 Dockerfile.build 中获得编译好的软件，用它构建的镜像只包含运行软件所必须的内容。\n这种情况被称为构造者模式(builder pattern)，")]),t._v(" "),e("p",[t._v("在编写 Dockerfile 构建 docker 镜像时，常遇到以下问题：")]),t._v(" "),e("p",[t._v("RUN 命令会让镜像新增 layer，导致镜像变大，虽然通过&&连接多个命令能缓解此问题，但如果命令之间用到 docker 指令例如 COPY、WORKDIR 等，依然会导致多个 layer；")]),t._v(" "),e("p",[t._v("有些工具在构建过程中会用到，但是最终的镜像是不需要的（例如用 maven 编译构建 java 工程），这要求 Dockerfile 的编写者花更多精力来清理这些工具，清理的过程又可能导致新的 layer；")]),t._v(" "),e("p",[t._v("为了解决上述问题，从 17.05 版本开始 Docker 在构建镜像时增加了新特性：多阶段构建(multi-stage builds)，将构建过程分为多个阶段，每个阶段都可以指定一个基础镜像，这样在一个 Dockerfile 就能将多个镜像的特性同时用到。")]),t._v(" "),e("h3",{attrs:{id:"问题合集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题合集"}},[t._v("#")]),t._v(" 问题合集")]),t._v(" "),e("p",[t._v("Q：为什么使用 "),e("code",[t._v("docker build -t 镜像名 .")]),t._v(" 命令打包后会出现两个 docker image？")]),t._v(" "),e("p",[t._v("A：因为使用了多阶段构建。Dockerfile 中以 "),e("code",[t._v("FROM")]),t._v(" 行开头的每个块都会创建一个新镜像。如果使用 "),e("code",[t._v("docker build -t")]),t._v(" 选项，则只有最后一个阶段会使用您指定的名称进行标记；其余块将在 "),e("code",[t._v("<none>")]),t._v(" 输出之类的地方显示为 "),e("code",[t._v("docker images")]),t._v(" 。")])])}),[],!1,null,null,null);e.default=r.exports}}]);